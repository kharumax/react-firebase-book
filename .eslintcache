[{"/Users/harumax/WebstormProjects/react-firebase-twitter/src/index.tsx":"1","/Users/harumax/WebstormProjects/react-firebase-twitter/src/serviceWorker.ts":"2","/Users/harumax/WebstormProjects/react-firebase-twitter/src/App.tsx":"3","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/auth/AuthTop.tsx":"4","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/auth/Login.tsx":"5","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/auth/SignUp.tsx":"6","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/top/Top.tsx":"7","/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/store.ts":"8","/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/slices/userSlice.ts":"9","/Users/harumax/WebstormProjects/react-firebase-twitter/src/config/firebase.ts":"10","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/LoadingPage.tsx":"11","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/entities/User.ts":"12","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/repository/userRepository.ts":"13"},{"size":766,"mtime":1611037445286,"results":"14","hashOfConfig":"15"},{"size":5424,"mtime":1607585605798,"results":"16","hashOfConfig":"15"},{"size":1650,"mtime":1611458808096,"results":"17","hashOfConfig":"15"},{"size":3419,"mtime":1610706185227,"results":"18","hashOfConfig":"15"},{"size":2134,"mtime":1611457115545,"results":"19","hashOfConfig":"15"},{"size":2323,"mtime":1611457672505,"results":"20","hashOfConfig":"15"},{"size":4227,"mtime":1611458742560,"results":"21","hashOfConfig":"15"},{"size":390,"mtime":1611037705769,"results":"22","hashOfConfig":"15"},{"size":1752,"mtime":1611402420272,"results":"23","hashOfConfig":"15"},{"size":933,"mtime":1611457672509,"results":"24","hashOfConfig":"15"},{"size":616,"mtime":1611382460454,"results":"25","hashOfConfig":"15"},{"size":447,"mtime":1611041612128,"results":"26","hashOfConfig":"15"},{"size":1677,"mtime":1611458742558,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"10k33js",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"30"},"/Users/harumax/WebstormProjects/react-firebase-twitter/src/index.tsx",[],["62","63"],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/serviceWorker.ts",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/App.tsx",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/auth/AuthTop.tsx",["64","65"],"import React from 'react';\nimport { Switch,Route } from \"react-router-dom\";\nimport styles from \"../../styles/auth/AuthTop.module.css\";\nimport LeftContainerIcon from \"../../images/left-container.png\";\nimport TwitterIcon from \"../../images/twitter-logo-white.png\";\nimport Login from \"./Login\";\nimport SignUp from \"./SignUp\";\n\nconst AuthTop: React.FC = () => {\n\n    document.title = \"「いま」起きていることを見つけよう / Twitter\";\n\n    const handleLoginButton = (e: React.MouseEvent<HTMLElement>) => {\n        window.location.href = \"/login\";\n    };\n\n    const handleSignUpButton = (e: React.MouseEvent<HTMLElement>) => {\n        window.location.href = \"/signup\";\n    };\n\n    return (\n\n        <Switch>\n            <Route exact path=\"/\">\n                <div className={styles.AuthTopBody}>\n                    <div className={styles.AuthTopContainer}>\n                        <div className={styles.AuthTopLeftContainer}>\n                            <img className={styles.AuthTopLeftImage} src={LeftContainerIcon}/>\n                        </div>\n                        <div className={styles.AuthTopRightContainer}>\n                            <div className={styles.AuthTopRightInnerContainer}>\n                                <img src={TwitterIcon}/>\n                                <p>「いま」起きていることを見つけよう</p>\n                                <h3>Twitterを始めよう</h3>\n                                <button className={styles.AuthTopRightSignUpButton} onClick={handleSignUpButton}>\n                                    アカウント作成\n                                </button>\n                                <button className={styles.AuthTopRightLoginButton} onClick={handleLoginButton}>\n                                    ログイン\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                    <div className={styles.AuthTopBottomContainer}>\n                        <div className={styles.AuthTopBottomContainerList}>\n                            <p>Twitterについて</p>\n                            <p>ヘルプセンター</p>\n                            <p>利用規約</p>\n                            <p>プライバシーポリシー</p>\n                            <p>Cookieのポリシー</p>\n                            <p>広告情報</p>\n                            <p>ブログ</p>\n                            <p>ステータス</p>\n                            <p>採用情報</p>\n                            <p>ブランドリリース</p>\n                            <p>広告</p>\n                            <p>マーケティング</p>\n                            <p>Twitterのビジネス活用</p>\n                            <p>開発者</p>\n                            <p>プロフィール一覧</p>\n                            <p>設定</p>\n                        </div>\n                        <p className={styles.AuthTopBottomContainerCopyright}>\n                            &copy; 2021 Twitter-Firebase\n                        </p>\n                    </div>\n                </div>\n            </Route>\n            <Route exact path=\"/login\">\n                <Login/>\n            </Route>\n            <Route exact path=\"/signup\">\n                <SignUp/>\n            </Route>\n        </Switch>\n\n    );\n};\n\nexport default AuthTop;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/auth/Login.tsx",["66","67"],"import React, {useState} from 'react';\nimport styles from \"../../styles/auth/Login.module.css\";\nimport TwitterIcon from \"../../images/twitter-logo-white.png\";\nimport {auth} from \"../../config/firebase\";\nimport {loginUser} from \"../../data/repository/userRepository\";\n\n\nconst Login: React.FC = () => {\n\n    document.title = \"Twitterにログイン / Twitter\";\n    const [email,setEmail] = useState(\"\");\n    const [password,setPassword] = useState(\"\");\n\n    const handleEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setEmail(e.target.value);\n    };\n    const handlePassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setPassword(e.target.value);\n    };\n    const clearCredential = () => {\n        setEmail(\"\");\n        setPassword(\"\");\n    };\n\n    const handleLogin = async () => {\n        loginUser(email,password)\n            .then(result => {\n                console.log(`DEBUG: This is ${result}`);\n                window.location.href = \"/\"\n            })\n            .catch(error => {\n                console.log(`Error: This is ${error}`);\n                alert(error);\n                clearCredential()\n            })\n    };\n\n    return (\n        <div className={styles.LoginContainer}>\n            <div className={styles.LoginInnerContainer}>\n                <img src={TwitterIcon}/>\n                <h2>Twitterにログイン</h2>\n                <input type=\"email\" required placeholder=\"メールアドレス\" className={styles.LoginEmailInput}\n                        value={email} onChange={handleEmail}\n                />\n                <input type=\"password\" required minLength={6} placeholder=\"パスワード\" className={styles.LoginPasswordInput}\n                        value={password} onChange={handlePassword}\n                />\n                <button type=\"submit\" className={styles.LoginConfirmButton} onClick={handleLogin}>\n                    ログイン\n                </button>\n                <a href=\"/signup\" className={styles.ToSignUpLink}>\n                    アカウント作成\n                </a>\n            </div>\n        </div>\n    );\n};\n\nexport default Login;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/auth/SignUp.tsx",["68"],"import React, {useState} from 'react';\nimport styles from \"../../styles/auth/SignUp.module.css\";\nimport TwitterIcon from \"../../images/twitter-logo-white.png\";\nimport {Credential, signUpUser} from \"../../data/repository/userRepository\";\n\nconst SignUp:React.FC = () => {\n\n    document.title = \"Twitterに登録 / Twitter\";\n\n    const initialCredential: Credential = {\n        fullname: \"\",\n        username: \"\",\n        email: \"\",\n        password: \"\"\n    };\n\n    const [credential,setCredential] = useState<Credential>(initialCredential);\n\n    const handleCredential = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const name = e.target.name;\n        const value = e.target.value;\n        const newCred = { ...credential,[name]: value };\n        setCredential(newCred)\n    };\n\n    const signUp = () => {\n        console.log(`signUp is called`);\n        signUpUser(credential).then(result => {\n            window.location.href = \"/\";\n            console.log(result)\n        })\n        .catch(error => {\n            alert(error);\n            setCredential(initialCredential);\n            console.error(`Error: ${error} at signUp in SignUp.tsx`);\n        });\n    };\n\n    return (\n        <div className={styles.SignUpContainer}>\n            <div className={styles.SignUpInnerContainer}>\n                <img src={TwitterIcon}/>\n                <h2>Twitterに登録</h2>\n                <input type=\"text\" required placeholder=\"フルネーム\" name=\"fullname\" value={credential.fullname} onChange={handleCredential}/>\n                <input type=\"text\" required placeholder=\"ユーザー名\" name=\"username\" value={credential.username} onChange={handleCredential}/>\n                <input type=\"email\" required placeholder=\"メールアドレス\" name=\"email\" value={credential.email} onChange={handleCredential}/>\n                <input type=\"password\" required minLength={6} placeholder=\"パスワード\" name=\"password\" value={credential.password} onChange={handleCredential}/>\n                <button type=\"submit\" className={styles.SignUpConfirmButton} onClick={signUp}>\n                    登録\n                </button>\n                <a href=\"/login\" className={styles.ToLoginLink}>\n                    ログインへ\n                </a>\n            </div>\n        </div>\n    );\n};\n\nexport default SignUp;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/top/Top.tsx",["69","70","71","72","73","74","75","76"],"import React, {useEffect, useState} from 'react';\nimport styles from \"../../styles/top/Top.module.css\";\nimport TwitterIcon from \"../../images/twitter-logo-white.png\";\nimport HomeSideBarIcon from \"../../images/home.png\";\nimport ExploreSideBarIcon from \"../../images/explore.png\";\nimport MessageSideBarIcon from \"../../images/message.png\";\nimport ProfileSideBarIcon from \"../../images/profile.png\";\nimport ProfileIcon from \"../../images/ironman.jpg\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectUser,fetchCurrentUser,logout} from \"../../store/slices/userSlice\";\nimport {fetchUser} from \"../../data/repository/userRepository\";\nimport LoadingPage from \"../LoadingPage\";\nimport {auth} from \"../../config/firebase\";\n\nconst Top: React.FC = () => {\n\n    const currentUser = useSelector(selectUser);\n    const dispatch = useDispatch();\n    const [isLoading,setIsLoading] = useState(true);\n\n    useEffect(() => {\n        fetchUser(currentUser.uid).then(user => {\n            dispatch(fetchCurrentUser(user));\n            setIsLoading(false)\n        });\n    },[dispatch]);\n\n    const handleLogout = async () => {\n        await auth.signOut()\n    };\n\n    const profileImage = () => {\n        return currentUser.profileImageUrl ? currentUser.profileImageUrl : ProfileIcon\n    };\n\n    var list = [];\n    for(var i=0; i<100; i++) {\n        list.push(<li key={i}>`${i}番目`</li>)\n    }\n\n    return (\n        <>\n            {isLoading ? <LoadingPage/> :\n                <div className={styles.TopContainer}>\n                    <div className={styles.TopLeftSpaceContainer}>\n\n                    </div>\n                    <div className={styles.TopLeftContainer}>\n\n                        <img src={TwitterIcon} className={styles.TopTwitterIcon}/>\n                        <div className={styles.TopSideBarContainer}>\n                            <button className={styles.TopSideBarItem}>\n                                <img src={HomeSideBarIcon} className={styles.TopSideBarIcon}/>\n                                <p className={styles.TopSideBarTitle} style={{paddingTop: \"16px\"}}>Home</p>\n                            </button>\n                            <button className={styles.TopSideBarItem}>\n                                <img src={ExploreSideBarIcon} className={styles.TopSideBarIcon}/>\n                                <p className={styles.TopSideBarTitle}>Explore</p>\n                            </button>\n                            <button className={styles.TopSideBarItem}>\n                                <img src={MessageSideBarIcon} className={styles.TopSideBarIcon}/>\n                                <p className={styles.TopSideBarTitle}>Messages</p>\n                            </button>\n                            <button className={styles.TopSideBarItem}>\n                                <img src={ProfileSideBarIcon} className={styles.TopSideBarIcon}/>\n                                <p className={styles.TopSideBarTitle}>Profile</p>\n                            </button>\n                        </div>\n                        <button className={styles.TopLogoutButton} onClick={handleLogout}>\n                            ログアウト\n                        </button>\n                        <button className={styles.TopPostTweetButton}>\n                            Tweet\n                        </button>\n                        <div className={styles.TopProfileContainer}>\n                            <img src={profileImage()} className={styles.TopProfileIcon}/>\n                            <div className={styles.TopProfileInfo}>\n                                <p className={styles.TopProfileFullname}>{currentUser.fullname}</p>\n                                <p className={styles.TopProfileUsername}>@{currentUser.username}</p>\n                            </div>\n                        </div>\n\n                    </div>\n                    <div className={styles.TopCenterContainer}>\n\n                    </div>\n                    <div className={styles.TopRightContainer}>\n\n                    </div>\n                    <div className={styles.TopRightSpaceContainer}>\n\n                    </div>\n                </div>\n            }\n        </>\n\n    );\n};\n\nexport default Top;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/store.ts",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/slices/userSlice.ts",["77","78"],"import { createSlice,PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\n\ninterface User {\n    uid: string;\n    fullname: string;\n    username: string;\n    profileImageUrl: string;\n    bio: string;\n}\n\nexport const userSlice = createSlice({\n   name: \"user\", // sliceの名称\n   initialState: {\n       // sliceの初期値\n       user: {\n           uid: \"\",\n           fullname: \"\",\n           username: \"\",\n           profileImageUrl: \"\",\n           bio: \"\",\n           isLogin: false,\n       }\n   },\n    // Stateに対して更新処理を定義する場所\n   reducers: {\n       // ここで定義した物がAction Creator関数の名前となる\n       login: (state,action) => {\n           state.user = {\n               ...state.user,uid: action.payload,isLogin: true\n           }\n       },\n       logout: (state) => {\n           state.user = {\n               uid: \"\",\n               fullname: \"\",\n               username: \"\",\n               profileImageUrl: \"\",\n               bio: \"\",\n               isLogin: false,\n           };\n       },\n       fetchCurrentUser: (state,action) => {\n           const data = action.payload;\n            state.user = {\n                ...state.user,\n                uid: data.uid,\n                fullname: data.fullname,\n                username: data.username,\n                profileImageUrl: data.profileImageUrl,\n                bio: data.bio\n            }\n       }\n   }\n});\n\nexport const { login,logout,fetchCurrentUser } = userSlice.actions;\n\nexport const selectUser = (state: RootState) => state.user.user;\n// 中間の user は storeのreducerの名称を指している\n// 最後の user は userSliceのstateであるuserを指している\n\nexport default userSlice.reducer;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/config/firebase.ts",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/LoadingPage.tsx",["79"],"import React from 'react';\nimport styles from \"../styles/LoadingPage.module.css\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport TwitterIcon from \"../images/twitter-logo-white.png\";\n\n\nconst LoadingPage: React.FC = () => {\n    return (\n        <div className={styles.LoadingPageContainer}>\n            <div className={styles.LoadingPageInnerContainer}>\n                <img src={TwitterIcon} className={styles.LoadingPageIcon}/>\n                <CircularProgress className={styles.LoadingPageIndicator} size={100} />\n            </div>\n        </div>\n    );\n};\n\nexport default LoadingPage;\n","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/entities/User.ts",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/repository/userRepository.ts",["80","81","82"],"import {auth, defaultImageUrl, userRef, usersRef} from \"../../config/firebase\";\nimport {buildUser, User} from \"../entities/User\";\nimport firebase from \"firebase/app\";\n\nexport interface Credential {\n    fullname: string;\n    username: string;\n    email: string;\n    password: string;\n}\n\nexport const fetchUser = async (uid: string) => {\n    console.log(`DEBUG: uid is ${uid}`);\n    const document = await usersRef.doc(uid).get();\n    if (document.exists && document.data() != undefined) {\n        return buildUser(document.data()!);\n    } else {\n        return null\n    }\n};\n\nexport const loginUser = async (email: string,password: string): Promise<string> => {\n    console.log(\"DEBUG: loginUser is called\");\n    try {\n        const authUser = await auth.signInWithEmailAndPassword(email,password);\n        return Promise.resolve(authUser.user!.uid)\n    } catch (error) {\n        return Promise.reject(error)\n    }\n};\n\nexport const signUpUser = async (credential: Credential): Promise<string> => {\n    console.log(\"DEBUG: signUpUser is called\");\n    try {\n        const authUser = await auth.createUserWithEmailAndPassword(credential.email, credential.password);\n        await userRef(authUser.user!.uid).set({\n            uid: authUser.user!.uid,fullname: credential.fullname,username: credential.username,\n            bio: \"\",profileImageUrl: defaultImageUrl\n        });\n        return Promise.resolve(authUser.user!.uid)\n    } catch (error) {\n        return Promise.reject(error)\n    }\n};\n\nexport const fetchUsers = async () => {\n\n};\n\n\n\n\n",{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":28,"column":29,"nodeType":"89","endLine":28,"endColumn":95},{"ruleId":"87","severity":1,"message":"88","line":32,"column":33,"nodeType":"89","endLine":32,"endColumn":57},{"ruleId":"90","severity":1,"message":"91","line":4,"column":9,"nodeType":"92","messageId":"93","endLine":4,"endColumn":13},{"ruleId":"87","severity":1,"message":"88","line":41,"column":17,"nodeType":"89","endLine":41,"endColumn":41},{"ruleId":"87","severity":1,"message":"88","line":42,"column":17,"nodeType":"89","endLine":42,"endColumn":41},{"ruleId":"90","severity":1,"message":"94","line":10,"column":37,"nodeType":"92","messageId":"93","endLine":10,"endColumn":43},{"ruleId":"95","severity":1,"message":"96","line":27,"column":7,"nodeType":"97","endLine":27,"endColumn":17,"suggestions":"98"},{"ruleId":"87","severity":1,"message":"88","line":51,"column":25,"nodeType":"89","endLine":51,"endColumn":83},{"ruleId":"87","severity":1,"message":"88","line":54,"column":33,"nodeType":"89","endLine":54,"endColumn":95},{"ruleId":"87","severity":1,"message":"88","line":58,"column":33,"nodeType":"89","endLine":58,"endColumn":98},{"ruleId":"87","severity":1,"message":"88","line":62,"column":33,"nodeType":"89","endLine":62,"endColumn":98},{"ruleId":"87","severity":1,"message":"88","line":66,"column":33,"nodeType":"89","endLine":66,"endColumn":98},{"ruleId":"87","severity":1,"message":"88","line":77,"column":29,"nodeType":"89","endLine":77,"endColumn":90},{"ruleId":"90","severity":1,"message":"99","line":1,"column":22,"nodeType":"92","messageId":"93","endLine":1,"endColumn":35},{"ruleId":"90","severity":1,"message":"100","line":4,"column":11,"nodeType":"92","messageId":"93","endLine":4,"endColumn":15},{"ruleId":"87","severity":1,"message":"88","line":11,"column":17,"nodeType":"89","endLine":11,"endColumn":76},{"ruleId":"90","severity":1,"message":"100","line":2,"column":20,"nodeType":"92","messageId":"93","endLine":2,"endColumn":24},{"ruleId":"90","severity":1,"message":"101","line":3,"column":8,"nodeType":"92","messageId":"93","endLine":3,"endColumn":16},{"ruleId":"102","severity":1,"message":"103","line":15,"column":44,"nodeType":"104","messageId":"105","endLine":15,"endColumn":46},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@typescript-eslint/no-unused-vars","'auth' is defined but never used.","Identifier","unusedVar","'logout' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentUser.uid'. Either include it or remove the dependency array.","ArrayExpression",["108"],"'PayloadAction' is defined but never used.","'User' is defined but never used.","'firebase' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"109","fix":"110"},"Update the dependencies array to be: [currentUser.uid, dispatch]",{"range":"111","text":"112"},[1078,1088],"[currentUser.uid, dispatch]"]