[{"/Users/harumax/WebstormProjects/react-firebase-twitter/src/index.tsx":"1","/Users/harumax/WebstormProjects/react-firebase-twitter/src/serviceWorker.ts":"2","/Users/harumax/WebstormProjects/react-firebase-twitter/src/App.tsx":"3","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/auth/AuthTop.tsx":"4","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/auth/Login.tsx":"5","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/auth/SignUp.tsx":"6","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/top/Top.tsx":"7","/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/store.ts":"8","/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/slices/userSlice.ts":"9","/Users/harumax/WebstormProjects/react-firebase-twitter/src/config/firebase.ts":"10","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/LoadingPage.tsx":"11","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/entities/user.ts":"12","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/repository/userRepository.ts":"13","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/home/Home.tsx":"14","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/messages/Messages.tsx":"15","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/profile/Profile.tsx":"16","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/explore/Explore.tsx":"17","/Users/harumax/WebstormProjects/react-firebase-twitter/src/utils/Utils.ts":"18","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/home/TweetInput.tsx":"19","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/shares/tweet/FeedContainer.tsx":"20","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/shares/tweet/TweetCell.tsx":"21","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/entities/User.ts":"22","/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/slices/tweetsSlice.ts":"23","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/repository/tweetRepository.ts":"24","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/entities/Tweet.ts":"25","/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/slices/profileSlice.ts":"26","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/auth/Logout.tsx":"27","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/repository/profileRepository.ts":"28","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/profile/ProfileUpdate.tsx":"29","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/shares/users/UsersContainer.tsx":"30","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/shares/users/UserCell.tsx":"31","/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/slices/usersSlice.ts":"32"},{"size":766,"mtime":1611460684467,"results":"33","hashOfConfig":"34"},{"size":5425,"mtime":1611627541754,"results":"35","hashOfConfig":"34"},{"size":2497,"mtime":1612168441145,"results":"36","hashOfConfig":"34"},{"size":3504,"mtime":1611627541760,"results":"37","hashOfConfig":"34"},{"size":2138,"mtime":1611627541762,"results":"38","hashOfConfig":"34"},{"size":2327,"mtime":1611627541764,"results":"39","hashOfConfig":"34"},{"size":6295,"mtime":1612431929875,"results":"40","hashOfConfig":"34"},{"size":632,"mtime":1612431929871,"results":"41","hashOfConfig":"34"},{"size":1626,"mtime":1612431929870,"results":"42","hashOfConfig":"34"},{"size":1453,"mtime":1611898239192,"results":"43","hashOfConfig":"34"},{"size":616,"mtime":1611460684470,"results":"44","hashOfConfig":"34"},{"size":422,"mtime":1611628863436,"results":"45","hashOfConfig":"34"},{"size":3570,"mtime":1612434289972,"results":"46","hashOfConfig":"34"},{"size":2299,"mtime":1612431929873,"results":"47","hashOfConfig":"34"},{"size":168,"mtime":1611627541769,"results":"48","hashOfConfig":"34"},{"size":8986,"mtime":1612169865929,"results":"49","hashOfConfig":"34"},{"size":5450,"mtime":1612434355029,"results":"50","hashOfConfig":"34"},{"size":1821,"mtime":1611669630362,"results":"51","hashOfConfig":"34"},{"size":3605,"mtime":1612168441147,"results":"52","hashOfConfig":"34"},{"size":742,"mtime":1612431929873,"results":"53","hashOfConfig":"34"},{"size":2431,"mtime":1611669630364,"results":"54","hashOfConfig":"34"},{"size":709,"mtime":1612341130396,"results":"55","hashOfConfig":"34"},{"size":1754,"mtime":1612431929870,"results":"56","hashOfConfig":"34"},{"size":2943,"mtime":1612431929869,"results":"57","hashOfConfig":"34"},{"size":1160,"mtime":1611669630355,"results":"58","hashOfConfig":"34"},{"size":2323,"mtime":1612169721225,"results":"59","hashOfConfig":"34"},{"size":1412,"mtime":1611898239202,"results":"60","hashOfConfig":"34"},{"size":4249,"mtime":1612169721210,"results":"61","hashOfConfig":"34"},{"size":7033,"mtime":1612169985427,"results":"62","hashOfConfig":"34"},{"size":982,"mtime":1612433557109,"results":"63","hashOfConfig":"34"},{"size":2078,"mtime":1612433557114,"results":"64","hashOfConfig":"34"},{"size":2140,"mtime":1612433557107,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"10k33js",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"68"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"68"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"68"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"68"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"68"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"68"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"68"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"68"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"68"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"68"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"68"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"68"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"68"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"68"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"68"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"68"},"/Users/harumax/WebstormProjects/react-firebase-twitter/src/index.tsx",[],["150","151"],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/serviceWorker.ts",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/App.tsx",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/auth/AuthTop.tsx",["152","153"],"import React from 'react';\nimport { Switch,Route,Redirect } from \"react-router-dom\";\nimport styles from \"../../styles/auth/AuthTop.module.css\";\nimport LeftContainerIcon from \"../../images/left-container.png\";\nimport TwitterIcon from \"../../images/twitter-logo-white.png\";\nimport Login from \"./Login\";\nimport SignUp from \"./SignUp\";\n\nconst AuthTop: React.FC = () => {\n\n    document.title = \"「いま」起きていることを見つけよう / Twitter\";\n\n    const handleLoginButton = (e: React.MouseEvent<HTMLElement>) => {\n        window.location.href = \"/login\";\n    };\n\n    const handleSignUpButton = (e: React.MouseEvent<HTMLElement>) => {\n        window.location.href = \"/signup\";\n    };\n\n    return (\n\n        <Switch>\n            <Route exact path=\"/login\">\n                <Login/>\n            </Route>\n            <Route exact path=\"/signup\">\n                <SignUp/>\n            </Route>\n            <Route exact path=\"/\">\n                <div className={styles.AuthTopBody}>\n                    <div className={styles.AuthTopContainer}>\n                        <div className={styles.AuthTopLeftContainer}>\n                            <img className={styles.AuthTopLeftImage} src={LeftContainerIcon}/>\n                        </div>\n                        <div className={styles.AuthTopRightContainer}>\n                            <div className={styles.AuthTopRightInnerContainer}>\n                                <img src={TwitterIcon}/>\n                                <p>「いま」起きていることを見つけよう</p>\n                                <h3>Twitterを始めよう</h3>\n                                <button className={styles.AuthTopRightSignUpButton} onClick={handleSignUpButton}>\n                                    アカウント作成\n                                </button>\n                                <button className={styles.AuthTopRightLoginButton} onClick={handleLoginButton}>\n                                    ログイン\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                    <div className={styles.AuthTopBottomContainer}>\n                        <div className={styles.AuthTopBottomContainerList}>\n                            <p>Twitterについて</p>\n                            <p>ヘルプセンター</p>\n                            <p>利用規約</p>\n                            <p>プライバシーポリシー</p>\n                            <p>Cookieのポリシー</p>\n                            <p>広告情報</p>\n                            <p>ブログ</p>\n                            <p>ステータス</p>\n                            <p>採用情報</p>\n                            <p>ブランドリリース</p>\n                            <p>広告</p>\n                            <p>マーケティング</p>\n                            <p>Twitterのビジネス活用</p>\n                            <p>開発者</p>\n                            <p>プロフィール一覧</p>\n                            <p>設定</p>\n                        </div>\n                        <p className={styles.AuthTopBottomContainerCopyright}>\n                            &copy; 2021 Twitter-Firebase\n                        </p>\n                    </div>\n                </div>\n            </Route>\n            <Route>\n                <Redirect to=\"/\"/>\n            </Route>\n        </Switch>\n\n    );\n};\n\nexport default AuthTop;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/auth/Login.tsx",["154","155"],"import React, {useState} from 'react';\nimport styles from \"../../styles/auth/Login.module.css\";\nimport TwitterIcon from \"../../images/twitter-logo-white.png\";\nimport {auth} from \"../../config/firebase\";\nimport {loginUser} from \"../../data/repository/userRepository\";\n\n\nconst Login: React.FC = () => {\n\n    document.title = \"Twitterにログイン / Twitter\";\n    const [email,setEmail] = useState(\"\");\n    const [password,setPassword] = useState(\"\");\n\n    const handleEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setEmail(e.target.value);\n    };\n    const handlePassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setPassword(e.target.value);\n    };\n    const clearCredential = () => {\n        setEmail(\"\");\n        setPassword(\"\");\n    };\n\n    const handleLogin = async () => {\n        loginUser(email,password)\n            .then(result => {\n                console.log(`DEBUG: This is ${result}`);\n                window.location.href = \"/home\"\n            })\n            .catch(error => {\n                console.log(`Error: This is ${error}`);\n                alert(error);\n                clearCredential()\n            })\n    };\n\n    return (\n        <div className={styles.LoginContainer}>\n            <div className={styles.LoginInnerContainer}>\n                <img src={TwitterIcon}/>\n                <h2>Twitterにログイン</h2>\n                <input type=\"email\" required placeholder=\"メールアドレス\" className={styles.LoginEmailInput}\n                        value={email} onChange={handleEmail}\n                />\n                <input type=\"password\" required minLength={6} placeholder=\"パスワード\" className={styles.LoginPasswordInput}\n                        value={password} onChange={handlePassword}\n                />\n                <button type=\"submit\" className={styles.LoginConfirmButton} onClick={handleLogin}>\n                    ログイン\n                </button>\n                <a href=\"/signup\" className={styles.ToSignUpLink}>\n                    アカウント作成\n                </a>\n            </div>\n        </div>\n    );\n};\n\nexport default Login;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/auth/SignUp.tsx",["156"],"import React, {useState} from 'react';\nimport styles from \"../../styles/auth/SignUp.module.css\";\nimport TwitterIcon from \"../../images/twitter-logo-white.png\";\nimport {Credential, signUpUser} from \"../../data/repository/userRepository\";\n\nconst SignUp:React.FC = () => {\n\n    document.title = \"Twitterに登録 / Twitter\";\n\n    const initialCredential: Credential = {\n        fullname: \"\",\n        username: \"\",\n        email: \"\",\n        password: \"\"\n    };\n\n    const [credential,setCredential] = useState<Credential>(initialCredential);\n\n    const handleCredential = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const name = e.target.name;\n        const value = e.target.value;\n        const newCred = { ...credential,[name]: value };\n        setCredential(newCred)\n    };\n\n    const signUp = () => {\n        console.log(`signUp is called`);\n        signUpUser(credential).then(result => {\n            window.location.href = \"/home\";\n            console.log(result)\n        })\n        .catch(error => {\n            alert(error);\n            setCredential(initialCredential);\n            console.error(`Error: ${error} at signUp in SignUp.tsx`);\n        });\n    };\n\n    return (\n        <div className={styles.SignUpContainer}>\n            <div className={styles.SignUpInnerContainer}>\n                <img src={TwitterIcon}/>\n                <h2>Twitterに登録</h2>\n                <input type=\"text\" required placeholder=\"フルネーム\" name=\"fullname\" value={credential.fullname} onChange={handleCredential}/>\n                <input type=\"text\" required placeholder=\"ユーザー名\" name=\"username\" value={credential.username} onChange={handleCredential}/>\n                <input type=\"email\" required placeholder=\"メールアドレス\" name=\"email\" value={credential.email} onChange={handleCredential}/>\n                <input type=\"password\" required minLength={6} placeholder=\"パスワード\" name=\"password\" value={credential.password} onChange={handleCredential}/>\n                <button type=\"submit\" className={styles.SignUpConfirmButton} onClick={signUp}>\n                    登録\n                </button>\n                <a href=\"/login\" className={styles.ToLoginLink}>\n                    ログインへ\n                </a>\n            </div>\n        </div>\n    );\n};\n\nexport default SignUp;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/top/Top.tsx",["157"],"import React, {useEffect, useState} from 'react';\nimport styles from \"../../styles/top/Top.module.css\";\nimport TwitterIcon from \"../../images/twitter-logo-white.png\";\nimport HomeSideBarIcon from \"../../images/home.png\";\nimport ExploreSideBarIcon from \"../../images/explore.png\";\nimport MessageSideBarIcon from \"../../images/message.png\";\nimport ProfileSideBarIcon from \"../../images/profile.png\";\nimport ProfileIcon from \"../../images/ironman.jpg\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectUser,fetchCurrentUser} from \"../../store/slices/userSlice\";\nimport {fetchUser, fetchUsers} from \"../../data/repository/userRepository\";\nimport LoadingPage from \"../LoadingPage\";\nimport { Switch,Route,NavLink,useLocation } from \"react-router-dom\";\nimport Home from \"../home/Home\";\nimport Explore from \"../explore/Explore\";\nimport Messages from \"../messages/Messages\";\nimport Profile from \"../profile/Profile\";\nimport {getTitle} from \"../../utils/Utils\";\nimport {fetchTweets} from \"../../data/repository/tweetRepository\";\nimport {addTweets} from \"../../store/slices/tweetsSlice\";\nimport ProfileUpdate from \"../profile/ProfileUpdate\";\nimport {addUsers} from \"../../store/slices/usersSlice\";\n\nconst Top: React.FC = () => {\n\n    const currentUser = useSelector(selectUser);\n    const dispatch = useDispatch();\n    const [isLoading,setIsLoading] = useState(true);\n    document.title = getTitle(useLocation().pathname);\n\n    useEffect(() => {\n        console.log(\"DEBUG: useEffect is called at Top.tsx\");\n        fetchUser(currentUser.uid).then(user => {\n            dispatch(fetchCurrentUser(user));\n            fetchTweets(currentUser.uid).then(result => {\n                dispatch(addTweets(result));\n                fetchUsers(currentUser.uid).then(result => {\n                    dispatch(addUsers(result));\n                    setIsLoading(false)\n                }).catch(e => {\n                    console.log(`Error: ${e}`)\n                });\n            }).catch(error => {\n                console.log(`DEBUG: Error is ${error}`)\n            });\n        });\n    },[dispatch]);\n\n    const profileImage = () => {\n        return currentUser.profileImageUrl ? currentUser.profileImageUrl : ProfileIcon\n    };\n\n    return (\n        <>\n            {isLoading ? <LoadingPage/> :\n                <div className={styles.TopContainer}>\n                    <div className={styles.TopLeftSpaceContainer}>\n\n                    </div>\n                    <div className={styles.TopLeftContainer}>\n                        <NavLink to=\"/home\">\n                            <img src={TwitterIcon} alt=\"TwitterIcon\" className={styles.TopTwitterIcon}/>\n                        </NavLink>\n                        <div className={styles.TopSideBarContainer}>\n                            <NavLink className={styles.TopSideBarItem} activeClassName={styles.TopSideBarItemSelected} exact to=\"/home\">\n                                <img src={HomeSideBarIcon} alt=\"HomeIcon\" className={styles.TopSideBarIcon}/>\n                                <p className={styles.TopSideBarTitle} style={{paddingTop: \"16px\"}}>Home</p>\n                            </NavLink>\n                            <NavLink className={styles.TopSideBarItem} activeClassName={styles.TopSideBarItemSelected} to=\"/explore\">\n                                <img src={ExploreSideBarIcon} alt=\"ExploreIcon\" className={styles.TopSideBarIcon}/>\n                                <p className={styles.TopSideBarTitle}>Explore</p>\n                            </NavLink>\n                            <NavLink className={styles.TopSideBarItem} activeClassName={styles.TopSideBarItemSelected} exact to=\"/messages\">\n                                <img src={MessageSideBarIcon} alt=\"MessagesIcon\" className={styles.TopSideBarIcon}/>\n                                <p className={styles.TopSideBarTitle}>Messages</p>\n                            </NavLink>\n                            <NavLink className={styles.TopSideBarItem} activeClassName={styles.TopSideBarItemSelected} to={`/${currentUser.uid}`}>\n                                <img src={ProfileSideBarIcon} alt=\"ProfileIcon\" className={styles.TopSideBarIcon}/>\n                                <p className={styles.TopSideBarTitle}>Profile</p>\n                            </NavLink>\n                        </div>\n                        {/*<button className={styles.TopLogoutButton} onClick={handleLogout}>*/}\n                        {/*    ログアウト*/}\n                        {/*</button>*/}\n                        <button className={styles.TopPostTweetButton}>\n                            Tweet\n                        </button>\n                        <div className={styles.TopProfileContainer}>\n                            <img src={profileImage()} alt=\"ProfileImage\" className={styles.TopProfileIcon}/>\n                            <div className={styles.TopProfileInfo}>\n                                <p className={styles.TopProfileFullname}>{currentUser.fullname}</p>\n                                <p className={styles.TopProfileUsername}>@{currentUser.username}</p>\n                            </div>\n                        </div>\n\n                    </div>\n                    <div className={styles.TopCenterContainer}>\n                        <Switch>\n                            <Route exact path=\"/home\">\n                                <Home/>\n                            </Route>\n                            <Route path=\"/explore\">\n                                <Explore/>\n                            </Route>\n                            <Route exact path=\"/messages\">\n                                <Messages/>\n                            </Route>\n                            <Route path={`/${currentUser.uid}`}>\n                                <Profile user={currentUser}/>\n                            </Route>\n                            <Route exact path=\"/settings/profile\">\n                                <ProfileUpdate user={currentUser}/>\n                            </Route>\n                        </Switch>\n                    </div>\n                    <div className={styles.TopRightContainer}/>\n                    <div className={styles.TopRightSpaceContainer}/>\n                </div>\n            }\n        </>\n\n    );\n};\n\nexport default Top;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/store.ts",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/slices/userSlice.ts",["158"],"import { createSlice,PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\n\nconst initialUserState = {\n    uid: \"\",\n    fullname: \"\",\n    username: \"\",\n    profileImageUrl: \"\",\n    backgroundUrl: \"\",\n    bio: \"\",\n    isLogin: false,\n};\n\nexport const userSlice = createSlice({\n   name: \"user\", // sliceの名称\n   initialState: {\n       // sliceの初期値\n       user: initialUserState\n   },\n    // Stateに対して更新処理を定義する場所\n   reducers: {\n       // ここで定義した物がAction Creator関数の名前となる\n       login: (state,action) => {\n           state.user = {\n               ...state.user,uid: action.payload,isLogin: true\n           }\n       },\n       logout: (state) => {\n           state.user = initialUserState;\n       },\n       fetchCurrentUser: (state,action) => {\n           const data = action.payload;\n            state.user = {\n                ...state.user,\n                uid: data.uid,\n                fullname: data.fullname,\n                username: data.username,\n                profileImageUrl: data.profileImageUrl,\n                backgroundUrl: data.backgroundUrl,\n                bio: data.bio\n            }\n       },\n       updateUser: (state,action) => {\n           state.user = action.payload;\n       },\n   }\n});\n\nexport const { login,logout,fetchCurrentUser,updateUser } = userSlice.actions;\n\nexport const selectUser = (state: RootState) => state.user.user;\n// 中間の user は storeのreducerの名称を指している\n// 最後の user は userSliceのstateであるuserを指している\n\n\nexport default userSlice.reducer;\n","/Users/harumax/WebstormProjects/react-firebase-twitter/src/config/firebase.ts",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/LoadingPage.tsx",["159"],"import React from 'react';\nimport styles from \"../styles/LoadingPage.module.css\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport TwitterIcon from \"../images/twitter-logo-white.png\";\n\n\nconst LoadingPage: React.FC = () => {\n    return (\n        <div className={styles.LoadingPageContainer}>\n            <div className={styles.LoadingPageInnerContainer}>\n                <img src={TwitterIcon} className={styles.LoadingPageIcon}/>\n                <CircularProgress className={styles.LoadingPageIndicator} size={100} />\n            </div>\n        </div>\n    );\n};\n\nexport default LoadingPage;\n","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/entities/user.ts",[],["160","161"],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/repository/userRepository.ts",["162","163","164","165","166"],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/home/Home.tsx",["167","168"],"import React, {useEffect} from 'react';\nimport styles from \"../../styles/home/Home.module.css\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectUser} from \"../../store/slices/userSlice\";\nimport {selectTweets,addTweets } from \"../../store/slices/tweetsSlice\";\nimport TweetInput from \"./TweetInput\";\nimport FeedContainer from \"../shares/tweet/FeedContainer\";\nimport {fetchTweets, sendTweet} from \"../../data/repository/tweetRepository\";\nimport {Tweet} from \"../../data/entities/Tweet\";\nimport {addTweet} from \"../../store/slices/tweetsSlice\";\nimport {fetchUsers} from \"../../data/repository/userRepository\";\nimport {addUsers} from \"../../store/slices/usersSlice\";\n\n\nconst Home: React.FC = () => {\n\n    const currentUser = useSelector(selectUser);\n    const tweets = useSelector(selectTweets);\n    const dispatch = useDispatch();\n\n    const postTweet = async (text: string,image: File | null) => {\n        console.log(`DEBUG: postTweet is called and text is ${text}`);\n        await sendTweet(currentUser,image,text).then(result => {\n            dispatch(addTweet(result));\n        }).catch(e => {\n            console.log(`Error ${e} at postTweet`)\n        });\n    };\n\n    useEffect( () => {\n        fetchTweets(currentUser.uid).then(result => {\n            dispatch(addTweets(result));\n            fetchUsers(currentUser.uid).then(result => {\n                dispatch(addUsers(result));\n            }).catch(e => {\n                console.log(`Error: ${e}`)\n            });\n        }).catch(error => {\n            console.log(`DEBUG: Error is ${error}`)\n        })\n    },[dispatch]);\n\n    return (\n        <div className={styles.HomeContainer}>\n            <h1 className={styles.HomeTitle}>Home</h1>\n            <div className={styles.HomeTweetInputContainer}>\n                <TweetInput user={currentUser} sendTweetAction={postTweet}/>\n            </div>\n            <div className={styles.HomeBlankSpace}>\n\n            </div>\n            <div className={styles.HomeFeedContainer}>\n                {\n                    tweets.length == 0 ? (\n                        <div>No Data</div>\n                    ) : <FeedContainer key={`FeedContainer_${currentUser.uid}`} tweets={tweets as Tweet[]} />\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default Home;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/messages/Messages.tsx",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/profile/Profile.tsx",["169","170","171","172"],"import React, {useEffect, useState} from 'react';\nimport styles from \"../../styles/profile/Profile.module.css\";\nimport ArrowIcon from \"../../images/arrow.png\";\nimport { Switch,Route,NavLink,useLocation } from \"react-router-dom\";\nimport {User} from \"../../data/entities/User\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport FeedContainer from \"../shares/tweet/FeedContainer\";\nimport {Tweet} from \"../../data/entities/Tweet\";\nimport {selectProfile,addUser,addTweets,addLikeTweets,addCommentTweets} from \"../../store/slices/profileSlice\";\nimport {selectUser} from \"../../store/slices/userSlice\";\nimport LoadingPage from \"../LoadingPage\";\n\nimport {\n    fetchIsFollowed,\n    fetchRelationshipStats, fetchUserCommentTweets,\n    fetchUserLikeTweets,\n    fetchUserPostTweets\n} from \"../../data/repository/profileRepository\";\n\ninterface PROPS {\n    user: User\n}\n\nconst Profile: React.FC<PROPS> = (props) => {\n\n    const profile = useSelector(selectProfile);\n    const [isLoading,setIsLoading] = useState(true);\n    const currentUser = useSelector(selectUser);\n    const dispatch = useDispatch();\n    document.title = `${props.user.fullname}`;\n\n    useEffect(() => {\n        setIsLoading(true);\n        console.log(`DEBUG: useEffect is called at Profile.tsx`);\n        const user = {\n            uid: props.user.uid,\n            fullname: props.user.fullname,\n            username: props.user.username,\n            profileImageUrl: props.user.profileImageUrl,\n            backgroundUrl: props.user.backgroundUrl,\n            bio: props.user.bio,\n            isCurrentUser: props.user.uid == currentUser.uid\n        };\n        const relationship = {\n            isFollowed: false,\n            following: 0,\n            followers: 0,\n        };\n        fetchIsFollowed(currentUser.uid,props.user.uid).then(result => {\n            relationship.isFollowed = result;\n            fetchRelationshipStats(props.user.uid).then(result => {\n                relationship.following = result.following;\n                relationship.followers = result.followers;\n                const payload = {user: user,relationship: relationship};\n                dispatch(addUser(payload));\n                fetchUserPostTweets(currentUser.uid,props.user.uid).then(result => {\n                    dispatch(addTweets(result));\n                    setIsLoading(false)\n                }).catch(e => {\n                    console.log(`Error: ${e} at Profile.tsx`)\n                })\n            }).catch(e => {\n                console.log(`Error: ${e}`)\n            })\n        }).catch(e => {\n            console.log(`Error: ${e}`)\n        });\n    },[dispatch]);\n\n\n    const handleLogoutButton = () => {\n        window.location.href = \"/logout\";\n    };\n\n    const handleEditProfileButton = () => {\n        window.location.href = \"/settings/profile\";\n    };\n\n    const handleFollowButton = () => {\n        console.log(`DEBUG: handleFollowButton is clicked`)\n    };\n\n    const handleFollowingButton = () => {\n        console.log(`DEBUG: handleFollowingButton is clicked`)\n    };\n\n    const handleLikesTweetsButton = () => {\n        fetchUserLikeTweets(props.user.uid,currentUser.uid).then(result => {\n            dispatch(addLikeTweets(result))\n        }).catch(e => {\n            console.log(`Error: ${e} at Profile.tsx`)\n        })\n    };\n\n    const handleCommentsTweetsButton = () => {\n        fetchUserCommentTweets(props.user.uid,currentUser.uid).then(result => {\n            dispatch(addCommentTweets(result))\n        }).catch(e => {\n            console.log(`Error: ${e} at Profile.tsx`)\n        })\n    };\n\n    return (\n        <>\n        {\n            isLoading ?\n                <LoadingPage/>\n                :\n                <div className={styles.ProfileContainer}>\n                    <div className={styles.ProfileNav}>\n                        <img src={ArrowIcon} alt=\"BackButton\" className={styles.ProfileNavBackButton}/>\n                        <div className={styles.ProfileNavUserInfo}>\n                            <div className={styles.ProfileNavUsername}>{profile.user.fullname}</div>\n                            <div className={styles.ProfileNavTweetCount}>0 Tweets</div>\n                        </div>\n                    </div>\n                    <div className={styles.ProfileUserInformationContainer}>\n                        {/* backgroundURLの処理はあとで行う　*/}\n                        {profile.user.backgroundUrl.length == 0 ?\n                            <div className={styles.ProfileBackground}/>\n                            :\n                            <img src={profile.user.backgroundUrl} alt=\"BackgroundImage\" className={styles.ProfileBackgroundImage}/>\n                        }\n                        <img src={profile.user.profileImageUrl} alt=\"ProfileImage\" className={styles.ProfileImage}/>\n                        <div className={styles.ProfileButtonContainer}>\n                            {profile.user.isCurrentUser ? (<button className={styles.ProfileLogoutButton} onClick={handleLogoutButton}>Logout</button>)\n                                : <div className={styles.ProfileSpaceTag}/>}\n                            {profile.user.isCurrentUser && (\n                                <button className={styles.ProfileActionButton} onClick={handleEditProfileButton}>Edit profile</button>\n                            )}\n                            {!profile.user.isCurrentUser && profile.relationship.isFollowed && (\n                                <button className={styles.ProfileActionDoneButton} onClick={handleFollowingButton}>Following</button>\n                            )}\n                            {!profile.user.isCurrentUser && !profile.relationship.isFollowed && (\n                                <button className={styles.ProfileActionButton} onClick={handleFollowButton}>Follow</button>\n                            )}\n                        </div>\n                    </div>\n                    <div className={styles.ProfileFullname}>{profile.user.fullname}</div>\n                    <div className={styles.ProfileUsername}>@{profile.user.username}</div>\n                    <div className={styles.ProfileBio}>\n                        {profile.user.bio}\n                    </div>\n                    <div className={styles.ProfileUserStats}>\n                        <div className={styles.ProfileRelationShipContainer}>\n                            <div className={styles.ProfileRelationShipCount}>{profile.relationship.following}</div>\n                            <div className={styles.ProfileRelationShipText}> Following</div>\n                        </div>\n                        <div className={styles.ProfileRelationShipContainer}>\n                            <div className={styles.ProfileRelationShipCount}>{profile.relationship.followers}</div>\n                            <div className={styles.ProfileRelationShipText}> Followers</div>\n                        </div>\n                    </div>\n                    <div className={styles.ProfileFeedContainer}>\n                        <div className={styles.ProfileFeedTabContainer}>\n                            <NavLink exact to={`/${props.user.uid}`} className={styles.ProfileFeedTabItem}\n                                     activeClassName={styles.ProfileFeedTabItemSelected}>\n                                Tweets</NavLink>\n                            <NavLink exact to={`/${props.user.uid}/likes`} className={styles.ProfileFeedTabItem}\n                                     activeClassName={styles.ProfileFeedTabItemSelected} onClick={handleLikesTweetsButton}>\n                                Likes</NavLink>\n                            <NavLink exact to={`/${props.user.uid}/comments`} className={styles.ProfileFeedTabItem}\n                                     activeClassName={styles.ProfileFeedTabItemSelected} onClick={handleCommentsTweetsButton}>\n                                Comments</NavLink>\n                        </div>\n                        <div className={styles.ProfileFeedContentContainer}>\n                            <Switch>\n                                <Route exact path={`/${props.user.uid}`}>\n                                    <FeedContainer key={`userTweets_${currentUser.uid}`} tweets={profile.tweets as Tweet[]}/>\n                                </Route>\n                                <Route exact path={`/${props.user.uid}/likes`}>\n                                    <FeedContainer key={`userLikes_${currentUser.uid}`} tweets={profile.likeTweets as Tweet[]}/>\n                                </Route>\n                                <Route exact path={`/${props.user.uid}/comments`}>\n                                    <FeedContainer key={`userComments_${currentUser.uid}`} tweets={profile.commentTweets as Tweet[]}/>\n                                </Route>\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n        }\n        </>\n    );\n};\n\nexport default Profile;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/explore/Explore.tsx",["173","174","175","176","177"],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/utils/Utils.ts",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/home/TweetInput.tsx",["178","179","180"],"import React, {useState} from 'react';\nimport styles from \"../../styles/home/TweetInput.module.css\";\nimport PhotoIcon from \"../../images/photo_image_icon.png\";\nimport XIcon from \"../../images/x_icon.png\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport {User} from \"../../data/entities/User\";\n\ntype TSendTweetFunction = (text: string,image: File | null) => void;\n\ninterface PROPS {\n    user: User\n    sendTweetAction: TSendTweetFunction\n}\n\ninterface IError {\n    error: Error | null,\n    message: string | null\n}\n\nconst TweetInput: React.FC<PROPS> = (props) => {\n\n    const [text,setText] = useState(\"\");\n    const [image,setImage] = useState<File | null>(null);\n    const [imageUrl,setImageUrl] = useState<string | null>(null);\n    const [textCount,setTextCount] = useState(\"0/140\");\n    const [error,setError] = useState<IError>({ error: null,message: null });\n\n    const handleText = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setText(e.target.value);\n        const newTextCount = `${e.target.value.length}/140`;\n        setTextCount(newTextCount);\n    };\n\n    const handleChangeImage = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const files = e.target.files;\n        if (files != null && files.length !== 0) {\n            setImage(files[0]);\n            setImageUrl(window.URL.createObjectURL(files[0]))\n        }\n    };\n\n    const handleRemoveImage = (e: React.MouseEvent<HTMLImageElement>) => {\n        setImage(null);\n        setImageUrl(\"\");\n    };\n\n    const postTweet = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        props.sendTweetAction(text,image);\n        clearStates()\n    };\n\n    const clearStates = () => {\n        setText(\"\");\n        setTextCount(\"0/140\");\n        setImage(null);\n        setImageUrl(null)\n    };\n\n    return (\n        <div className={styles.TweetInputContainer}>\n            <img src={props.user.profileImageUrl} alt=\"ProfileImage\" className={styles.TweetInputProfileImage}/>\n            <form className={styles.TweetInputContent} onSubmit={postTweet}>\n                <TextareaAutosize placeholder=\"What's happening?\" className={styles.TweetInputTextField} value={text} onChange={handleText}/>\n                {/*  写真が選択されている場合は表示する、それ以外は空タブになる  */}\n                { imageUrl ?\n                    <div className={styles.TweetInputImageContainer}>\n                        <img src={imageUrl} alt=\"image\" className={styles.TweetInputSelectedImage}/>\n                        <img src={XIcon} alt=\"XIcon\" className={styles.TweetInputXIcon} onClick={handleRemoveImage}/>\n                    </div>\n                : <></> }\n                <div className={styles.TweetInputContentFooter}>\n                    <label className={styles.TweetInputPhotoSelectButton}>\n                        <span>\n                            <img src={PhotoIcon} alt=\"PhotoSelectedButton\" className={styles.TweetInputPhotoIcon}/>\n                        </span>\n                        <input type=\"file\" className={styles.TweetInputPhotoInput} onChange={handleChangeImage} accept=\"image/*\"/>\n                    </label>\n                    <div className={styles.TweetInputFooterInner}>\n                        <p className={styles.TweetInputTextCount}>{textCount}</p>\n                        <button type=\"submit\" className={styles.TweetInputPostButton}>\n                            Tweet\n                        </button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default TweetInput;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/shares/tweet/FeedContainer.tsx",["181","182","183"],"import React, {useEffect} from 'react';\nimport styles from \"../../../styles/shares/tweet/FeedContainer.module.css\";\nimport TweetCell from \"./TweetCell\";\nimport {Tweet} from \"../../../data/entities/Tweet\";\n\ninterface PROPS {\n    tweets: Tweet[]\n}\n\nconst FeedContainer: React.FC<PROPS> = (props) => {\n\n    const feed = props.tweets.map((tweet) => (\n        <div className={styles.FeedContainerTweetCell} key={tweet.id}>\n            <TweetCell key={tweet.id} tweet={tweet}/>\n        </div>\n    ));\n\n    return (\n        <div className={styles.FeedContainer}>\n            {\n                (props.tweets.length == 0 || props.tweets[0].id == \"\") ?\n                <div/> : feed\n            }\n        </div>\n    );\n};\n\nexport default FeedContainer;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/shares/tweet/TweetCell.tsx",["184","185","186"],"import React from 'react';\nimport styles from \"../../../styles/shares/tweet/TweetCell.module.css\";\nimport ProfileIcon from \"../../../images/ironman.jpg\";\nimport HeartIcon from \"../../../images/heart_icon.png\";\nimport HeartLikedIcon from \"../../../images/heart_liked_icon.png\";\nimport CommentIcon from \"../../../images/comment_icon.png\";\nimport SaveIcon from \"../../../images/save_icon.png\";\nimport {Tweet} from \"../../../data/entities/Tweet\";\n\ninterface PROPS {\n    tweet: Tweet\n}\n\nconst TweetCell: React.FC<PROPS> = (props) => {\n\n    return (\n        <div className={styles.TweetCellContainer}>\n            <img src={props.tweet.profileImageUrl} alt=\"ProfileIcon\" className={styles.TweetCellProfileImage}/>\n            <div className={styles.TweetCellContentContainer}>\n                <div className={styles.TweetCellTweetInfo}>\n                    <div className={styles.TweetCellFullname}>{props.tweet.fullname}</div>\n                    <div className={styles.TweetCellUsername}>@{props.tweet.username} • {props.tweet.timestamp}</div>\n                </div>\n                <div className={styles.TweetCellText}>\n                    {props.tweet.text}\n                </div>\n                {\n                    props.tweet.imageUrl.length != 0 ?\n                        <img src={props.tweet.imageUrl} alt=\"PostImage\" className={styles.TweetCellImage}/>\n                        :\n                        <></>\n                }\n                <div className={styles.TweetCellActionBar}>\n                    <div className={styles.TweetCellActionItem}>\n                        <img src={CommentIcon} alt=\"ActionIcon\" className={styles.TweetCellActionItemImage}/>\n                        <div className={styles.TweetCellActionItemCount}>{props.tweet.likes}</div>\n                    </div>\n                    <div className={styles.TweetCellActionItem}>\n                        <img src={HeartIcon} alt=\"ActionIcon\" className={styles.TweetCellHeartIcon} onClick={() => console.log(\"Clicked!\")}/>\n                        <div className={styles.TweetCellActionItemLikedCount}>{props.tweet.comments}</div>\n                    </div>\n                    <div className={styles.TweetCellActionItem}>\n                        <img src={SaveIcon} alt=\"ActionIcon\" className={styles.TweetCellActionItemImage}/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default TweetCell;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/entities/User.ts",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/slices/tweetsSlice.ts",["187","188","189"],"import {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\nimport {RootState} from \"../store\";\nimport {Tweet} from \"../../data/entities/Tweet\";\nimport firebase from \"firebase/app\";\nimport {FirestoreTimestampToString} from \"../../utils/Utils\";\n\nconst nowDate = new Date();\n\nexport const tweetsSlice = createSlice({\n    name: \"tweets\", // sliceの名称\n    initialState: {\n        // sliceの初期値\n        tweets: [{\n            id:\"\",uid:\"\",fullname:\"\",username:\"\",profileImageUrl:\"\",\n            text:\"\",imageUrl:\"\",timestamp: FirestoreTimestampToString(nowDate),likes: 0,comments: 0,isLiked: false\n        }]\n    },\n    // Stateに対して更新処理を定義する場所\n    reducers: {\n        // ここで定義した物がAction Creator関数の名前となる\n        addTweets: (state,action) => {\n            state.tweets = action.payload;\n        },\n        addTweet: (state,action) => {\n            const newTweets = state.tweets;\n            newTweets.unshift(action.payload);\n            state.tweets = newTweets\n        },\n        searchTweets: (state,action: {payload: string}) => {\n            const keyword = action.payload.toLowerCase();\n            state.tweets = state.tweets.filter(tweet => (\n                tweet.username.toLowerCase().includes(keyword) || tweet.fullname.toLowerCase().includes(keyword) ||\n                tweet.text.toLowerCase().includes(keyword)\n            ))\n        }\n    }\n});\n\nexport const { addTweets,addTweet,searchTweets } = tweetsSlice.actions;\n\nexport const selectTweets = (state: RootState) => state.tweets.tweets;\n// 中間の user は storeのreducerの名称を指している\n// 最後の user は userSliceのstateであるuserを指している\n\nexport default tweetsSlice.reducer;\n\n","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/repository/tweetRepository.ts",["190","191"],"import {tweetsRef} from \"../../config/firebase\";\nimport {buildTweet, Tweet} from \"../entities/Tweet\";\nimport {User} from \"../entities/User\";\nimport {FirestoreTimestampToString, readNowTimestamp, uploadImage} from \"../../utils/Utils\";\nimport firebase from \"firebase/app\";\n\n/*\n* Data Structure\n* posts -> likes -> userId\n*                -> userId\n*\n*       -> comments -> data\n*\n* */\n// type Tweets = Tweet[]\n\nexport const fetchTweets = async (currentUid: string): Promise<Tweet[]> => {\n    try {\n        const tweetDocs = tweetsRef.orderBy(\"timestamp\",\"desc\");\n        const tweets = await fetchTweetsByOption(tweetDocs,currentUid);\n        return Promise.resolve(tweets)\n    } catch (e) {\n        return Promise.reject(e)\n    }\n};\n\nexport const fetchTweetsByOption = async (ref: firebase.firestore.Query<firebase.firestore.DocumentData>,currentUid: string): Promise<Tweet[]> => {\n    try {\n        const tweetDocs = await ref.get();\n        let tweets: Tweet[] = [];\n        // ここでPromiseを返す配列を作成する。Promise自体を返すわけではないので await を利用しても意味がない\n        const tweetsPromises = tweetDocs.docs.map(async doc => {\n            const likeDocs = await doc.ref.collection(\"likes\").get();\n            const commentDocs = await doc.ref.collection(\"comments\").get();\n            const isLikedDocs = likeDocs.docs.filter(doc => {\n                return doc.id == currentUid\n            });\n            const isLiked = isLikedDocs.length != 0; // isLikedDocsはいいねしたユーザーのUidのDocumentを取得する\n            const tweet = buildTweet(doc.data(),likeDocs.size,commentDocs.size,isLiked);\n            tweets = tweets.concat(tweet)\n        });\n        // ここで配列のPromiseをそれぞれ非同期で実行する。それぞれ Promise を返すので await で処理が終了するまで待つ\n        await Promise.all(tweetsPromises);\n        return Promise.resolve(tweets)\n    } catch (e) {\n        return Promise.reject(e)\n    }\n};\n\nexport const sendTweet = async (user: User,file: File | null,text: string): Promise<Tweet> => {\n    let url = \"\";\n    if (file != null) {\n        url = await uploadImage(file,\"tweet\",user.uid)\n    }\n    try {\n        const tweetRef = tweetsRef.doc();\n        const data = { id: tweetRef.id,uid: user.uid,fullname: user.fullname,username: user.username,\n            profileImageUrl: user.profileImageUrl,text: text,imageUrl: url,timestamp: readNowTimestamp()};\n        await tweetRef.set(data);\n        const tweet: Tweet = { id: data.id,uid: data.uid,fullname: data.fullname,username: data.username,\n            profileImageUrl: data.profileImageUrl,text: data.text,imageUrl: url,timestamp: FirestoreTimestampToString(new Date()),likes: 0,comments: 0,isLiked: false};\n        return  Promise.resolve(tweet)\n    } catch (e) {\n        console.log(`DEBUG: ${e} at sendTweet`);\n        return Promise.reject(e)\n    }\n};\n\n\n\n\n\n","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/entities/Tweet.ts",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/slices/profileSlice.ts",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/auth/Logout.tsx",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/repository/profileRepository.ts",["192","193"],"import {\n    followersRef,\n    followingRef,\n    tweetsRef,\n    userCommentsTweetRef,\n    userLikesTweetRef,\n    userRef\n} from \"../../config/firebase\";\nimport {Tweet} from \"../entities/Tweet\";\nimport {fetchTweetsByOption} from \"./tweetRepository\";\nimport {UpdateCredential} from \"./userRepository\";\nimport {User} from \"../entities/User\";\nimport {uploadImage} from \"../../utils/Utils\";\n\n\nexport const fetchIsFollowed = async (currentUid: string,uid: string): Promise<boolean> => {\n    try {\n        const ref = await followingRef(currentUid).doc(uid).get();\n        return Promise.resolve(ref.exists)\n    } catch (e) {\n        return Promise.reject(e)\n    }\n};\n\ninterface RelationshipStats {\n    following: number;\n    followers: number;\n}\n\nexport const fetchRelationshipStats = async (uid: string): Promise<RelationshipStats> => {\n    try {\n        const followingDocs = await followingRef(uid).get();\n        const followersDocs = await followersRef(uid).get();\n        const stats: RelationshipStats = {\n            following: followingDocs.docs.length,\n            followers: followersDocs.docs.length,\n        };\n        return Promise.resolve(stats)\n    } catch (e) {\n        return Promise.reject(e)\n    }\n};\n\nexport const fetchUserPostTweets = async (currentUid: string,uid: string): Promise<Tweet[]> => {\n    try {\n        const tweetDocs = tweetsRef.where(\"uid\",\"==\",uid);\n        const tweets = await fetchTweetsByOption(tweetDocs,currentUid);\n        //console.log(`DEBUG: tweets[0].id is ${tweets[0].id} at fetchUserPostTweets`);\n        return Promise.resolve(tweets)\n    } catch (e) {\n        return Promise.reject(e)\n    }\n};\n\nexport const fetchUserLikeTweets = async (uid: string,currentUid: string): Promise<Tweet[]> => {\n    try {\n        let tweets: Tweet[] = [];\n        const userLikesTweetDocs = await userLikesTweetRef(uid).get();\n        if (userLikesTweetDocs.docs.length == 0) {\n            return Promise.resolve(tweets)\n        }\n        userLikesTweetDocs.docs.map((doc => doc.id));\n        const tweetDocs = tweetsRef.where(\"id\",\"in\",userLikesTweetDocs);\n        tweets = await fetchTweetsByOption(tweetDocs, currentUid);\n        return Promise.resolve(tweets)\n    } catch (e) {\n        return Promise.reject(e)\n    }\n};\n\nexport const fetchUserCommentTweets = async (uid: string,currentUid: string): Promise<Tweet[]> => {\n    try {\n        let tweets: Tweet[] = [];\n        const userLikesTweetDocs = await userCommentsTweetRef(uid).get();\n        if (userLikesTweetDocs.docs.length == 0) {\n            return Promise.resolve(tweets)\n        }\n        userLikesTweetDocs.docs.map((doc => doc.id));\n        const tweetDocs = tweetsRef.where(\"id\",\"in\",userLikesTweetDocs);\n        tweets = await fetchTweetsByOption(tweetDocs, currentUid);\n        return Promise.resolve(tweets)\n    } catch (e) {\n        return Promise.reject(e)\n    }\n};\n\nexport const updateProfile = async (currentUser: User,credential: UpdateCredential): Promise<User> => {\n    try {\n        let profileImageUrl = currentUser.profileImageUrl;\n        let backgroundUrl = currentUser.backgroundUrl;\n        if (credential.profileImage != null) {\n            profileImageUrl = await uploadImage(credential.profileImage,\"profile_image\",currentUser.uid)\n        }\n        if (credential.backgroundImage != null) {\n            backgroundUrl = await uploadImage(credential.backgroundImage,\"background_image\",currentUser.uid)\n        }\n        await userRef(currentUser.uid).update({\n            fullname: credential.fullname,username: credential.username,bio: credential.bio,\n            profileImageUrl: profileImageUrl,backgroundUrl: backgroundUrl\n        });\n        const user: User = {\n            uid: currentUser.uid,fullname: credential.fullname,username: credential.username,\n            bio: credential.bio,profileImageUrl: profileImageUrl,backgroundUrl: backgroundUrl\n        };\n        return Promise.resolve(user);\n    } catch (e) {\n        console.log(`Error: ${e} at profileRepository`);\n        return Promise.reject(e)\n    }\n};\n\n\n\n\n/*\n* Data Structure\n* pattern 1\n* users -> uid -> followers -> uid\n*              -> following -> uid\n*\n* pattern 2\n* following -> uid -> uid\n* followers -> uid -> uid\n*\n* Test 1\n* user1 user2 user3\n*\n*\n* */","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/profile/ProfileUpdate.tsx",["194","195"],"import React, {useState} from 'react';\nimport styles from \"../../styles/profile/ProfileUpdate.module.css\";\nimport {User} from \"../../data/entities/User\";\nimport Profile from \"./Profile\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectUser,updateUser} from \"../../store/slices/userSlice\";\nimport CameraIcon from \"../../images/camera_icon.png\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport {UpdateCredential} from \"../../data/repository/userRepository\";\nimport {selectProfile,updateUserProfile} from \"../../store/slices/profileSlice\";\nimport {updateProfile} from \"../../data/repository/profileRepository\";\nimport LoadingPage from \"../LoadingPage\";\n\ninterface PROPS {\n    user: User\n}\n\nconst ProfileUpdate: React.FC<PROPS> = (props) => {\n\n    const currentUser = useSelector(selectUser);\n    const profile = useSelector(selectProfile);\n    const dispatch = useDispatch();\n    const [credential,setCredential] = useState<UpdateCredential>({\n        uid: props.user.uid,fullname: props.user.fullname,username: props.user.username,\n        bio: props.user.bio ? props.user.bio : \"\",profileImage: null,backgroundImage: null\n    });\n    const [isLoading,setIsLoading] = useState<boolean>(false);\n\n    document.title = `${props.user.fullname} / settings`;\n\n    const handleClickBack = () => {\n        window.location.href =  `/${currentUser.uid}`\n    };\n\n    const handleCredential = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const name = e.target.name;\n        const value = e.target.value;\n        const newCred = { ...credential,[name]: value };\n        setCredential(newCred)\n    };\n\n    const handleChangeImage = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const files = e.target.files;\n        if (files != null && files.length !== 0) {\n            const newCred = {...credential,[e.target.name]: files[0]};\n            setCredential(newCred)\n        }\n    };\n\n    const handleBio = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        const newCred = {...credential,bio: e.target.value};\n        setCredential(newCred);\n    };\n\n    const handleClickSave = (e: React.FormEvent<HTMLFormElement>) => {\n        setIsLoading(true);\n        e.preventDefault();\n        updateProfile(currentUser,credential).then(result => {\n            dispatch(updateUser(result));\n            dispatch(updateUserProfile(result));\n            setIsLoading(false);\n            window.location.href =  `/${currentUser.uid}`\n        }).catch(e => {\n            setIsLoading(false);\n            console.log(`Error: ${e} at ProfileUpdate.tsx`);\n        });\n    };\n\n    return (\n        <>\n        {\n            isLoading ?\n                (<LoadingPage/>)\n                :\n                <div className={styles.ProfileUpdateContainer}>\n                    <div className={styles.ProfileContainer} onClick={handleClickBack}>\n                        <Profile user={props.user}/>\n                    </div>\n                    <form className={styles.ProfileUpdateContent} onSubmit={handleClickSave}>\n                        <div className={styles.ProfileUpdateHeader}>\n                            <div className={styles.ProfileUpdateHeaderInner}>\n                                <button className={styles.ProfileUpdateXIcon} type=\"reset\" onClick={handleClickBack}>×\n                                </button>\n                                <div className={styles.ProfileUpdateTitle}>\n                                    Edit Profile\n                                </div>\n                            </div>\n                            <button type=\"submit\" className={styles.ProfileUpdateSaveButton}>\n                                Save\n                            </button>\n                        </div>\n                        <div className={styles.ProfileUpdateBackground}>\n                            {/* 既に画像がある場合、もしくは画像を選択した時　*/}\n                            {credential.backgroundImage != null && (\n                                <img src={window.URL.createObjectURL(credential.backgroundImage)} alt=\"BackgroundImage\"\n                                     className={styles.ProfileUpdateBackgroundImageSelected}/>)}\n                            {props.user.backgroundUrl != \"\" && credential.backgroundImage == null && (\n                                <img src={props.user.backgroundUrl} alt=\"BackgroundImage\"\n                                     className={styles.ProfileUpdateBackgroundImageSelected}/>)}\n                            <label className={styles.ProfileUpdateBackgroundButton}>\n                        <span>\n                            <img src={CameraIcon} alt=\"PhotoSelectedButton\" className={styles.ProfileUpdateCameraIcon}/>\n                        </span>\n                                <input type=\"file\" className={styles.ProfileUpdateImageInput} name=\"backgroundImage\"\n                                       accept=\"image/*\" onChange={handleChangeImage}/>\n                            </label>\n                        </div>\n                        <div className={styles.ProfileUpdateImageContainer}>\n                            {credential.profileImage != null ?\n                                (<img src={window.URL.createObjectURL(credential.profileImage)} alt=\"Profile\"\n                                      className={styles.ProfileUpdateProfileImageSelected}/>)\n                                :\n                                (<img src={props.user.profileImageUrl} alt=\"Profile\"\n                                      className={styles.ProfileUpdateProfileImageSelected}/>)\n                            }\n                            <label className={styles.ProfileUpdateImageButton}>\n                        <span>\n                            <img src={CameraIcon} alt=\"PhotoSelectedButton\"\n                                 className={styles.ProfileUpdateSmallCameraIcon}/>\n                        </span>\n                                <input type=\"file\" className={styles.ProfileUpdateImageInput} name=\"profileImage\"\n                                       accept=\"image/*\" onChange={handleChangeImage}/>\n                            </label>\n                        </div>\n                        <div className={styles.ProfileUpdateTextContainer}>\n                            <input type=\"text\" className={styles.ProfileUpdateFullnameTextField} name=\"fullname\"\n                                   value={credential.fullname} onChange={handleCredential}/>\n                            <input type=\"text\" className={styles.ProfileUpdateUsernameTextField} name=\"username\"\n                                   value={credential.username} onChange={handleCredential}/>\n                            <TextareaAutosize className={styles.ProfileUpdateBioTextArea} name=\"bio\"\n                                              value={credential.bio} onChange={handleBio}/>\n                        </div>\n                    </form>\n                </div>\n        }\n        </>\n    );\n};\n\nexport default ProfileUpdate;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/shares/users/UsersContainer.tsx",["196","197"],"import React from 'react';\nimport {UserInfo} from \"../../../data/entities/User\";\nimport styles from \"../../../styles/shares/users/UsersContainer.module.css\";\nimport UserCell from \"./UserCell\";\nimport {TFollowAction, TUnFollowAction} from \"../../../store/slices/usersSlice\";\n\n\ninterface PROPS {\n    users: UserInfo[]\n    followAction: TFollowAction\n    unFollowAction: TUnFollowAction\n}\n\nconst UsersContainer: React.FC<PROPS> = (props) => {\n\n    const usersFeed = props.users.map(user => (\n        <div className={styles.UsersContainerUserCell} key={user.user.uid}>\n            <UserCell userInfo={user} key={user.user.uid} followAction={props.followAction} unFollowAction={props.unFollowAction}/>\n        </div>\n    ));\n\n    return (\n        <div className={styles.UsersContainer}>\n            {\n                (props.users.length == 0 || props.users[0].user.uid == \"\") ?\n                    <div/> : usersFeed\n            }\n        </div>\n    );\n};\n\nexport default UsersContainer;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/shares/users/UserCell.tsx",[],["198","199"],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/slices/usersSlice.ts",["200","201","202"],"import { createSlice,PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\nimport {UserInfo} from \"../../data/entities/User\";\n\nconst initialUserState: UserInfo[] = [\n    {\n        user: {\n            uid: \"\",\n            fullname: \"\",\n            username: \"\",\n            profileImageUrl: \"\",\n            backgroundUrl: \"\",\n            bio: \"\",\n        },\n        isFollowed: false\n    }\n];\n\nexport const usersSlice = createSlice({\n    name: \"users\", // sliceの名称\n    initialState: {\n        // sliceの初期値\n        users: initialUserState\n    },\n    // Stateに対して更新処理を定義する場所\n    reducers: {\n        addUsers: (state,action) => {\n            //console.log(`DEBUG: Action Payload is ${action.payload[0].userInfo.user.uid}`);\n            state.users = action.payload\n        },\n        searchUsers: (state,action:{payload: string}) => {\n            const keyword = action.payload.toLowerCase();\n            state.users = state.users.filter(userInfo => (\n                userInfo.user.fullname.toLowerCase().includes(keyword) || userInfo.user.username.toLowerCase().includes(keyword)\n            ));\n        },\n        followUser: (state,action: {payload: string}) => {\n            const uid = action.payload;\n            state.users = state.users.map(userInfo => {\n                if (userInfo.user.uid == uid) {\n                    userInfo.isFollowed = true\n                }\n                return userInfo;\n            });\n        },\n        unFollowUser: (state,action: {payload: string}) => {\n            const uid = action.payload;\n            state.users = state.users.map(userInfo => {\n                if (userInfo.user.uid == uid) {\n                    userInfo.isFollowed = false\n                }\n                return userInfo;\n            });\n        },\n    }\n});\n\nexport const { addUsers,searchUsers,followUser,unFollowUser } = usersSlice.actions;\n\nexport const selectUsers = (state: RootState) => state.users.users;\n\nexport default usersSlice.reducer;\n\nexport type TFollowAction = (uid: string) => void;\n\nexport type TUnFollowAction = (uid: string) => void;\n\n\n",{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","severity":1,"message":"208","line":34,"column":29,"nodeType":"209","endLine":34,"endColumn":95},{"ruleId":"207","severity":1,"message":"208","line":38,"column":33,"nodeType":"209","endLine":38,"endColumn":57},{"ruleId":"210","severity":1,"message":"211","line":4,"column":9,"nodeType":"212","messageId":"213","endLine":4,"endColumn":13},{"ruleId":"207","severity":1,"message":"208","line":41,"column":17,"nodeType":"209","endLine":41,"endColumn":41},{"ruleId":"207","severity":1,"message":"208","line":42,"column":17,"nodeType":"209","endLine":42,"endColumn":41},{"ruleId":"214","severity":1,"message":"215","line":47,"column":7,"nodeType":"216","endLine":47,"endColumn":17,"suggestions":"217"},{"ruleId":"210","severity":1,"message":"218","line":1,"column":22,"nodeType":"212","messageId":"213","endLine":1,"endColumn":35},{"ruleId":"207","severity":1,"message":"208","line":11,"column":17,"nodeType":"209","endLine":11,"endColumn":76},{"ruleId":"203","replacedBy":"219"},{"ruleId":"205","replacedBy":"220"},{"ruleId":"210","severity":1,"message":"221","line":2,"column":35,"nodeType":"212","messageId":"213","endLine":2,"endColumn":39},{"ruleId":"210","severity":1,"message":"222","line":4,"column":9,"nodeType":"212","messageId":"213","endLine":4,"endColumn":19},{"ruleId":"210","severity":1,"message":"223","line":4,"column":21,"nodeType":"212","messageId":"213","endLine":4,"endColumn":26},{"ruleId":"224","severity":1,"message":"225","line":25,"column":44,"nodeType":"226","messageId":"227","endLine":25,"endColumn":46},{"ruleId":"224","severity":1,"message":"225","line":78,"column":24,"nodeType":"226","messageId":"227","endLine":78,"endColumn":26},{"ruleId":"214","severity":1,"message":"215","line":41,"column":7,"nodeType":"216","endLine":41,"endColumn":17,"suggestions":"228"},{"ruleId":"224","severity":1,"message":"229","line":54,"column":35,"nodeType":"226","messageId":"227","endLine":54,"endColumn":37},{"ruleId":"210","severity":1,"message":"230","line":4,"column":31,"nodeType":"212","messageId":"213","endLine":4,"endColumn":42},{"ruleId":"224","severity":1,"message":"229","line":42,"column":43,"nodeType":"226","messageId":"227","endLine":42,"endColumn":45},{"ruleId":"214","severity":1,"message":"231","line":68,"column":7,"nodeType":"216","endLine":68,"endColumn":17,"suggestions":"232"},{"ruleId":"224","severity":1,"message":"229","line":119,"column":60,"nodeType":"226","messageId":"227","endLine":119,"endColumn":62},{"ruleId":"210","severity":1,"message":"233","line":9,"column":21,"nodeType":"212","messageId":"213","endLine":9,"endColumn":29},{"ruleId":"210","severity":1,"message":"234","line":11,"column":9,"nodeType":"212","messageId":"213","endLine":11,"endColumn":19},{"ruleId":"214","severity":1,"message":"235","line":33,"column":7,"nodeType":"216","endLine":33,"endColumn":17,"suggestions":"236"},{"ruleId":"224","severity":1,"message":"229","line":40,"column":19,"nodeType":"226","messageId":"227","endLine":40,"endColumn":21},{"ruleId":"224","severity":1,"message":"225","line":42,"column":32,"nodeType":"226","messageId":"227","endLine":42,"endColumn":34},{"ruleId":"210","severity":1,"message":"237","line":26,"column":12,"nodeType":"212","messageId":"213","endLine":26,"endColumn":17},{"ruleId":"210","severity":1,"message":"238","line":26,"column":18,"nodeType":"212","messageId":"213","endLine":26,"endColumn":26},{"ruleId":"239","severity":1,"message":"240","line":68,"column":25,"nodeType":"209","endLine":68,"endColumn":101},{"ruleId":"210","severity":1,"message":"241","line":1,"column":16,"nodeType":"212","messageId":"213","endLine":1,"endColumn":25},{"ruleId":"224","severity":1,"message":"229","line":21,"column":38,"nodeType":"226","messageId":"227","endLine":21,"endColumn":40},{"ruleId":"224","severity":1,"message":"229","line":21,"column":65,"nodeType":"226","messageId":"227","endLine":21,"endColumn":67},{"ruleId":"210","severity":1,"message":"242","line":3,"column":8,"nodeType":"212","messageId":"213","endLine":3,"endColumn":19},{"ruleId":"210","severity":1,"message":"243","line":5,"column":8,"nodeType":"212","messageId":"213","endLine":5,"endColumn":22},{"ruleId":"224","severity":1,"message":"225","line":28,"column":49,"nodeType":"226","messageId":"227","endLine":28,"endColumn":51},{"ruleId":"210","severity":1,"message":"244","line":1,"column":9,"nodeType":"212","messageId":"213","endLine":1,"endColumn":25},{"ruleId":"210","severity":1,"message":"223","line":3,"column":9,"nodeType":"212","messageId":"213","endLine":3,"endColumn":14},{"ruleId":"210","severity":1,"message":"245","line":4,"column":8,"nodeType":"212","messageId":"213","endLine":4,"endColumn":16},{"ruleId":"224","severity":1,"message":"229","line":36,"column":31,"nodeType":"226","messageId":"227","endLine":36,"endColumn":33},{"ruleId":"224","severity":1,"message":"225","line":38,"column":48,"nodeType":"226","messageId":"227","endLine":38,"endColumn":50},{"ruleId":"224","severity":1,"message":"229","line":59,"column":44,"nodeType":"226","messageId":"227","endLine":59,"endColumn":46},{"ruleId":"224","severity":1,"message":"229","line":75,"column":44,"nodeType":"226","messageId":"227","endLine":75,"endColumn":46},{"ruleId":"210","severity":1,"message":"246","line":21,"column":11,"nodeType":"212","messageId":"213","endLine":21,"endColumn":18},{"ruleId":"224","severity":1,"message":"225","line":97,"column":55,"nodeType":"226","messageId":"227","endLine":97,"endColumn":57},{"ruleId":"224","severity":1,"message":"229","line":24,"column":37,"nodeType":"226","messageId":"227","endLine":24,"endColumn":39},{"ruleId":"224","severity":1,"message":"229","line":24,"column":69,"nodeType":"226","messageId":"227","endLine":24,"endColumn":71},{"ruleId":"203","replacedBy":"247"},{"ruleId":"205","replacedBy":"248"},{"ruleId":"210","severity":1,"message":"218","line":1,"column":22,"nodeType":"212","messageId":"213","endLine":1,"endColumn":35},{"ruleId":"224","severity":1,"message":"229","line":40,"column":39,"nodeType":"226","messageId":"227","endLine":40,"endColumn":41},{"ruleId":"224","severity":1,"message":"229","line":49,"column":39,"nodeType":"226","messageId":"227","endLine":49,"endColumn":41},"no-native-reassign",["249"],"no-negated-in-lhs",["250"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@typescript-eslint/no-unused-vars","'auth' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentUser.uid'. Either include it or remove the dependency array.","ArrayExpression",["251"],"'PayloadAction' is defined but never used.",["249"],["250"],"'User' is defined but never used.","'buildTweet' is defined but never used.","'Tweet' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["252"],"Expected '===' and instead saw '=='.","'useLocation' is defined but never used.","React Hook useEffect has missing dependencies: 'currentUser.uid', 'props.user.backgroundUrl', 'props.user.bio', 'props.user.fullname', 'props.user.profileImageUrl', 'props.user.uid', and 'props.user.username'. Either include them or remove the dependency array.",["253"],"'addUsers' is defined but never used.","'fetchUsers' is defined but never used.","React Hook useEffect has missing dependencies: 'location.pathname' and 'location.search'. Either include them or remove the dependency array.",["254"],"'error' is assigned a value but never used.","'setError' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'useEffect' is defined but never used.","'ProfileIcon' is defined but never used.","'HeartLikedIcon' is defined but never used.","'createAsyncThunk' is defined but never used.","'firebase' is defined but never used.","'profile' is assigned a value but never used.",["249"],["250"],"no-global-assign","no-unsafe-negation",{"desc":"255","fix":"256"},{"desc":"255","fix":"257"},{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},"Update the dependencies array to be: [currentUser.uid, dispatch]",{"range":"262","text":"263"},{"range":"264","text":"263"},"Update the dependencies array to be: [currentUser.uid, dispatch, props.user.backgroundUrl, props.user.bio, props.user.fullname, props.user.profileImageUrl, props.user.uid, props.user.username]",{"range":"265","text":"266"},"Update the dependencies array to be: [dispatch, location.pathname, location.search]",{"range":"267","text":"268"},[2084,2094],"[currentUser.uid, dispatch]",[1589,1599],[2623,2633],"[currentUser.uid, dispatch, props.user.backgroundUrl, props.user.bio, props.user.fullname, props.user.profileImageUrl, props.user.uid, props.user.username]",[1541,1551],"[dispatch, location.pathname, location.search]"]