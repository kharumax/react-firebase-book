[{"/Users/harumax/WebstormProjects/react-firebase-twitter/src/index.tsx":"1","/Users/harumax/WebstormProjects/react-firebase-twitter/src/serviceWorker.ts":"2","/Users/harumax/WebstormProjects/react-firebase-twitter/src/App.tsx":"3","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/auth/AuthTop.tsx":"4","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/auth/Login.tsx":"5","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/auth/SignUp.tsx":"6","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/top/Top.tsx":"7","/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/store.ts":"8","/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/slices/userSlice.ts":"9","/Users/harumax/WebstormProjects/react-firebase-twitter/src/config/firebase.ts":"10","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/LoadingPage.tsx":"11","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/entities/user.ts":"12","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/repository/userRepository.ts":"13","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/home/Home.tsx":"14","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/messages/Messages.tsx":"15","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/profile/Profile.tsx":"16","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/explore/Explore.tsx":"17","/Users/harumax/WebstormProjects/react-firebase-twitter/src/utils/Utils.ts":"18","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/home/TweetInput.tsx":"19","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/shares/tweet/FeedContainer.tsx":"20","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/shares/tweet/TweetCell.tsx":"21","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/entities/User.ts":"22","/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/slices/tweetsSlice.ts":"23","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/repository/tweetRepository.ts":"24","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/entities/Tweet.ts":"25","/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/slices/profileSlice.ts":"26","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/auth/Logout.tsx":"27","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/repository/profileRepository.ts":"28","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/profile/ProfileUpdate.tsx":"29","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/shares/users/UsersContainer.tsx":"30","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/shares/users/UserCell.tsx":"31","/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/slices/usersSlice.ts":"32","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/profile/UserProfile.tsx":"33","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/shares/tweet/TweetDetail.tsx":"34","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/shares/tweet/CommentCell.tsx":"35","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/shares/tweet/CommentForm.tsx":"36","/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/slices/tweetDetailSlice.ts":"37","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/entities/Comment.ts":"38","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/repository/commentRepository.ts":"39","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/shares/tweet/CommentContainer.tsx":"40","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/top/sidebar/tweet/TweetsSideBar.tsx":"41","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/top/sidebar/user/UsersSideBar.tsx":"42","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/top/sidebar/tweet/TopTweetCell.tsx":"43","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/top/sidebar/user/TopUserCell.tsx":"44"},{"size":766,"mtime":1611460684467,"results":"45","hashOfConfig":"46"},{"size":5425,"mtime":1611627541754,"results":"47","hashOfConfig":"46"},{"size":2497,"mtime":1612168441145,"results":"48","hashOfConfig":"46"},{"size":3504,"mtime":1611627541760,"results":"49","hashOfConfig":"46"},{"size":2138,"mtime":1611627541762,"results":"50","hashOfConfig":"46"},{"size":2327,"mtime":1611627541764,"results":"51","hashOfConfig":"46"},{"size":9208,"mtime":1612685762937,"results":"52","hashOfConfig":"46"},{"size":733,"mtime":1612618847371,"results":"53","hashOfConfig":"46"},{"size":1626,"mtime":1612431929870,"results":"54","hashOfConfig":"46"},{"size":1790,"mtime":1612618847363,"results":"55","hashOfConfig":"46"},{"size":616,"mtime":1611460684470,"results":"56","hashOfConfig":"46"},{"size":422,"mtime":1611628863436,"results":"57","hashOfConfig":"46"},{"size":3570,"mtime":1612442718145,"results":"58","hashOfConfig":"46"},{"size":2875,"mtime":1612618847379,"results":"59","hashOfConfig":"46"},{"size":168,"mtime":1611627541769,"results":"60","hashOfConfig":"46"},{"size":11042,"mtime":1612502940270,"results":"61","hashOfConfig":"46"},{"size":6180,"mtime":1612502940269,"results":"62","hashOfConfig":"46"},{"size":1821,"mtime":1611669630362,"results":"63","hashOfConfig":"46"},{"size":3605,"mtime":1612168441147,"results":"64","hashOfConfig":"46"},{"size":1030,"mtime":1612502940271,"results":"65","hashOfConfig":"46"},{"size":3674,"mtime":1612618847387,"results":"66","hashOfConfig":"46"},{"size":709,"mtime":1612341130396,"results":"67","hashOfConfig":"46"},{"size":2459,"mtime":1612502940268,"results":"68","hashOfConfig":"46"},{"size":4615,"mtime":1612618847368,"results":"69","hashOfConfig":"46"},{"size":1160,"mtime":1611669630355,"results":"70","hashOfConfig":"46"},{"size":4011,"mtime":1612502940267,"results":"71","hashOfConfig":"46"},{"size":1412,"mtime":1611898239202,"results":"72","hashOfConfig":"46"},{"size":4291,"mtime":1612502940265,"results":"73","hashOfConfig":"46"},{"size":7033,"mtime":1612169985427,"results":"74","hashOfConfig":"46"},{"size":982,"mtime":1612442718152,"results":"75","hashOfConfig":"46"},{"size":2312,"mtime":1612442718151,"results":"76","hashOfConfig":"46"},{"size":2140,"mtime":1612442718146,"results":"77","hashOfConfig":"46"},{"size":926,"mtime":1612442718151,"results":"78","hashOfConfig":"46"},{"size":6686,"mtime":1612618847388,"results":"79","hashOfConfig":"46"},{"size":1244,"mtime":1612618847380,"results":"80","hashOfConfig":"46"},{"size":2173,"mtime":1612618847382,"results":"81","hashOfConfig":"46"},{"size":1831,"mtime":1612618847370,"results":"82","hashOfConfig":"46"},{"size":796,"mtime":1612618847365,"results":"83","hashOfConfig":"46"},{"size":1315,"mtime":1612683110561,"results":"84","hashOfConfig":"46"},{"size":769,"mtime":1612618847381,"results":"85","hashOfConfig":"46"},{"size":1060,"mtime":1612847345543,"results":"86","hashOfConfig":"46"},{"size":1304,"mtime":1612847345516,"results":"87","hashOfConfig":"46"},{"size":1279,"mtime":1612684838025,"results":"88","hashOfConfig":"46"},{"size":1919,"mtime":1612684838017,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"10k33js",{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"92"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"92"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"92"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"92"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"92"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"92"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"92"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"92"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"92"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"92"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"92"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"92"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"92"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"92"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"92"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"92"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"92"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"92"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"92"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"92"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"92"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"92"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"92"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"92"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/harumax/WebstormProjects/react-firebase-twitter/src/index.tsx",[],["204","205"],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/serviceWorker.ts",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/App.tsx",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/auth/AuthTop.tsx",["206","207"],"import React from 'react';\nimport { Switch,Route,Redirect } from \"react-router-dom\";\nimport styles from \"../../styles/auth/AuthTop.module.css\";\nimport LeftContainerIcon from \"../../images/left-container.png\";\nimport TwitterIcon from \"../../images/twitter-logo-white.png\";\nimport Login from \"./Login\";\nimport SignUp from \"./SignUp\";\n\nconst AuthTop: React.FC = () => {\n\n    document.title = \"「いま」起きていることを見つけよう / Twitter\";\n\n    const handleLoginButton = (e: React.MouseEvent<HTMLElement>) => {\n        window.location.href = \"/login\";\n    };\n\n    const handleSignUpButton = (e: React.MouseEvent<HTMLElement>) => {\n        window.location.href = \"/signup\";\n    };\n\n    return (\n\n        <Switch>\n            <Route exact path=\"/login\">\n                <Login/>\n            </Route>\n            <Route exact path=\"/signup\">\n                <SignUp/>\n            </Route>\n            <Route exact path=\"/\">\n                <div className={styles.AuthTopBody}>\n                    <div className={styles.AuthTopContainer}>\n                        <div className={styles.AuthTopLeftContainer}>\n                            <img className={styles.AuthTopLeftImage} src={LeftContainerIcon}/>\n                        </div>\n                        <div className={styles.AuthTopRightContainer}>\n                            <div className={styles.AuthTopRightInnerContainer}>\n                                <img src={TwitterIcon}/>\n                                <p>「いま」起きていることを見つけよう</p>\n                                <h3>Twitterを始めよう</h3>\n                                <button className={styles.AuthTopRightSignUpButton} onClick={handleSignUpButton}>\n                                    アカウント作成\n                                </button>\n                                <button className={styles.AuthTopRightLoginButton} onClick={handleLoginButton}>\n                                    ログイン\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                    <div className={styles.AuthTopBottomContainer}>\n                        <div className={styles.AuthTopBottomContainerList}>\n                            <p>Twitterについて</p>\n                            <p>ヘルプセンター</p>\n                            <p>利用規約</p>\n                            <p>プライバシーポリシー</p>\n                            <p>Cookieのポリシー</p>\n                            <p>広告情報</p>\n                            <p>ブログ</p>\n                            <p>ステータス</p>\n                            <p>採用情報</p>\n                            <p>ブランドリリース</p>\n                            <p>広告</p>\n                            <p>マーケティング</p>\n                            <p>Twitterのビジネス活用</p>\n                            <p>開発者</p>\n                            <p>プロフィール一覧</p>\n                            <p>設定</p>\n                        </div>\n                        <p className={styles.AuthTopBottomContainerCopyright}>\n                            &copy; 2021 Twitter-Firebase\n                        </p>\n                    </div>\n                </div>\n            </Route>\n            <Route>\n                <Redirect to=\"/\"/>\n            </Route>\n        </Switch>\n\n    );\n};\n\nexport default AuthTop;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/auth/Login.tsx",["208","209"],"import React, {useState} from 'react';\nimport styles from \"../../styles/auth/Login.module.css\";\nimport TwitterIcon from \"../../images/twitter-logo-white.png\";\nimport {auth} from \"../../config/firebase\";\nimport {loginUser} from \"../../data/repository/userRepository\";\n\n\nconst Login: React.FC = () => {\n\n    document.title = \"Twitterにログイン / Twitter\";\n    const [email,setEmail] = useState(\"\");\n    const [password,setPassword] = useState(\"\");\n\n    const handleEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setEmail(e.target.value);\n    };\n    const handlePassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setPassword(e.target.value);\n    };\n    const clearCredential = () => {\n        setEmail(\"\");\n        setPassword(\"\");\n    };\n\n    const handleLogin = async () => {\n        loginUser(email,password)\n            .then(result => {\n                console.log(`DEBUG: This is ${result}`);\n                window.location.href = \"/home\"\n            })\n            .catch(error => {\n                console.log(`Error: This is ${error}`);\n                alert(error);\n                clearCredential()\n            })\n    };\n\n    return (\n        <div className={styles.LoginContainer}>\n            <div className={styles.LoginInnerContainer}>\n                <img src={TwitterIcon}/>\n                <h2>Twitterにログイン</h2>\n                <input type=\"email\" required placeholder=\"メールアドレス\" className={styles.LoginEmailInput}\n                        value={email} onChange={handleEmail}\n                />\n                <input type=\"password\" required minLength={6} placeholder=\"パスワード\" className={styles.LoginPasswordInput}\n                        value={password} onChange={handlePassword}\n                />\n                <button type=\"submit\" className={styles.LoginConfirmButton} onClick={handleLogin}>\n                    ログイン\n                </button>\n                <a href=\"/signup\" className={styles.ToSignUpLink}>\n                    アカウント作成\n                </a>\n            </div>\n        </div>\n    );\n};\n\nexport default Login;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/auth/SignUp.tsx",["210"],"import React, {useState} from 'react';\nimport styles from \"../../styles/auth/SignUp.module.css\";\nimport TwitterIcon from \"../../images/twitter-logo-white.png\";\nimport {Credential, signUpUser} from \"../../data/repository/userRepository\";\n\nconst SignUp:React.FC = () => {\n\n    document.title = \"Twitterに登録 / Twitter\";\n\n    const initialCredential: Credential = {\n        fullname: \"\",\n        username: \"\",\n        email: \"\",\n        password: \"\"\n    };\n\n    const [credential,setCredential] = useState<Credential>(initialCredential);\n\n    const handleCredential = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const name = e.target.name;\n        const value = e.target.value;\n        const newCred = { ...credential,[name]: value };\n        setCredential(newCred)\n    };\n\n    const signUp = () => {\n        console.log(`signUp is called`);\n        signUpUser(credential).then(result => {\n            window.location.href = \"/home\";\n            console.log(result)\n        })\n        .catch(error => {\n            alert(error);\n            setCredential(initialCredential);\n            console.error(`Error: ${error} at signUp in SignUp.tsx`);\n        });\n    };\n\n    return (\n        <div className={styles.SignUpContainer}>\n            <div className={styles.SignUpInnerContainer}>\n                <img src={TwitterIcon}/>\n                <h2>Twitterに登録</h2>\n                <input type=\"text\" required placeholder=\"フルネーム\" name=\"fullname\" value={credential.fullname} onChange={handleCredential}/>\n                <input type=\"text\" required placeholder=\"ユーザー名\" name=\"username\" value={credential.username} onChange={handleCredential}/>\n                <input type=\"email\" required placeholder=\"メールアドレス\" name=\"email\" value={credential.email} onChange={handleCredential}/>\n                <input type=\"password\" required minLength={6} placeholder=\"パスワード\" name=\"password\" value={credential.password} onChange={handleCredential}/>\n                <button type=\"submit\" className={styles.SignUpConfirmButton} onClick={signUp}>\n                    登録\n                </button>\n                <a href=\"/login\" className={styles.ToLoginLink}>\n                    ログインへ\n                </a>\n            </div>\n        </div>\n    );\n};\n\nexport default SignUp;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/top/Top.tsx",["211","212","213"],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/store.ts",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/slices/userSlice.ts",["214"],"import { createSlice,PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\n\nconst initialUserState = {\n    uid: \"\",\n    fullname: \"\",\n    username: \"\",\n    profileImageUrl: \"\",\n    backgroundUrl: \"\",\n    bio: \"\",\n    isLogin: false,\n};\n\nexport const userSlice = createSlice({\n   name: \"user\", // sliceの名称\n   initialState: {\n       // sliceの初期値\n       user: initialUserState\n   },\n    // Stateに対して更新処理を定義する場所\n   reducers: {\n       // ここで定義した物がAction Creator関数の名前となる\n       login: (state,action) => {\n           state.user = {\n               ...state.user,uid: action.payload,isLogin: true\n           }\n       },\n       logout: (state) => {\n           state.user = initialUserState;\n       },\n       fetchCurrentUser: (state,action) => {\n           const data = action.payload;\n            state.user = {\n                ...state.user,\n                uid: data.uid,\n                fullname: data.fullname,\n                username: data.username,\n                profileImageUrl: data.profileImageUrl,\n                backgroundUrl: data.backgroundUrl,\n                bio: data.bio\n            }\n       },\n       updateUser: (state,action) => {\n           state.user = action.payload;\n       },\n   }\n});\n\nexport const { login,logout,fetchCurrentUser,updateUser } = userSlice.actions;\n\nexport const selectUser = (state: RootState) => state.user.user;\n// 中間の user は storeのreducerの名称を指している\n// 最後の user は userSliceのstateであるuserを指している\n\n\nexport default userSlice.reducer;\n","/Users/harumax/WebstormProjects/react-firebase-twitter/src/config/firebase.ts",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/LoadingPage.tsx",["215"],"import React from 'react';\nimport styles from \"../styles/LoadingPage.module.css\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport TwitterIcon from \"../images/twitter-logo-white.png\";\n\n\nconst LoadingPage: React.FC = () => {\n    return (\n        <div className={styles.LoadingPageContainer}>\n            <div className={styles.LoadingPageInnerContainer}>\n                <img src={TwitterIcon} className={styles.LoadingPageIcon}/>\n                <CircularProgress className={styles.LoadingPageIndicator} size={100} />\n            </div>\n        </div>\n    );\n};\n\nexport default LoadingPage;\n","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/entities/user.ts",[],["216","217"],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/repository/userRepository.ts",["218","219","220","221","222"],"import {auth, defaultImageUrl, followersRef, followingRef, userRef, usersRef} from \"../../config/firebase\";\nimport {buildUser, buildUserInfo, User, UserInfo} from \"../entities/User\";\nimport firebase from \"firebase\";\nimport {buildTweet, Tweet} from \"../entities/Tweet\";\nimport {fetchIsFollowed} from \"./profileRepository\";\n\nexport interface Credential {\n    fullname: string;\n    username: string;\n    email: string;\n    password: string;\n}\n\nexport interface UpdateCredential {\n    readonly uid: string;\n    fullname: string;\n    username: string;\n    bio: string;\n    profileImage: File | null;\n    backgroundImage: File | null;\n}\n\nexport const fetchUser = async (uid: string) => {\n    const document = await userRef(uid).get();\n    if (document.exists && document.data() != undefined) {\n        return buildUser(document.data()!);\n    } else {\n        return null\n    }\n};\n\nexport const loginUser = async (email: string,password: string): Promise<string> => {\n    try {\n        const authUser = await auth.signInWithEmailAndPassword(email,password);\n        return Promise.resolve(authUser.user!.uid)\n    } catch (error) {\n        return Promise.reject(error)\n    }\n};\n\nexport const signUpUser = async (credential: Credential): Promise<string> => {\n    try {\n        const authUser = await auth.createUserWithEmailAndPassword(credential.email, credential.password);\n        await userRef(authUser.user!.uid).set({\n            uid: authUser.user!.uid,fullname: credential.fullname,username: credential.username,\n            bio: \"\",profileImageUrl: defaultImageUrl,backgroundUrl: \"\"\n        });\n        return Promise.resolve(authUser.user!.uid)\n    } catch (error) {\n        return Promise.reject(error)\n    }\n};\n\nexport const fetchUsers = async (currentUid: string): Promise<UserInfo[]> => {\n    try {\n        const users = await fetchUsersByOption(usersRef,currentUid);\n\n        return Promise.resolve(users);\n    } catch (e) {\n        return Promise.reject(e);\n    }\n};\n\nexport const searchUsers = async (currentUid: string) => {\n    try {\n        //const ref = usersRef.where()\n    } catch (e) {\n\n    }\n};\n\nexport const fetchUsersByOption = async (ref: firebase.firestore.Query<firebase.firestore.DocumentData>,currentUid: string): Promise<UserInfo[]> => {\n    try {\n        const userDocs = await ref.get();\n        let users: UserInfo[] = [];\n\n        const usersPromises = userDocs.docs.map(async doc => {\n            if (doc.id != currentUid) {\n                const user = buildUser(doc.data());\n                const isFollowed = await fetchIsFollowed(currentUid,doc.id);\n                const userInfo = buildUserInfo(user,isFollowed);\n                users = users.concat(userInfo);\n            }\n        });\n        await Promise.all(usersPromises);\n\n        return Promise.resolve(users)\n\n    } catch (e) {\n        return Promise.reject(e)\n    }\n};\n\n/*\nusers - uid - following - uid\n            - followers - uid\n*/\n\nexport const sendFollowUser = async (currentUid: string,uid: string): Promise<boolean> => {\n    try {\n        await followingRef(currentUid).doc(uid).set({});\n        await followersRef(uid).doc(currentUid).set({});\n        return Promise.resolve(true);\n    } catch (e) {\n        return Promise.reject(e)\n    }\n};\n\nexport const sendUnFollowUser = async (currentUid: string,uid: string): Promise<boolean> => {\n    try {\n        await followingRef(currentUid).doc(uid).delete();\n        await followersRef(uid).doc(currentUid).delete();\n        return Promise.resolve(false);\n    } catch (e) {\n        return Promise.reject(e)\n    }\n};\n\n\n\n\n","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/home/Home.tsx",["223","224"],"import React, {useEffect} from 'react';\nimport styles from \"../../styles/home/Home.module.css\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectUser} from \"../../store/slices/userSlice\";\nimport {selectTweets,addTweets,likeTweet,unLikeTweet } from \"../../store/slices/tweetsSlice\";\nimport TweetInput from \"./TweetInput\";\nimport FeedContainer from \"../shares/tweet/FeedContainer\";\nimport {fetchTweets, sendLikeTweet, sendTweet, sendUnLikeTweet} from \"../../data/repository/tweetRepository\";\nimport {addTweet} from \"../../store/slices/tweetsSlice\";\nimport {fetchUsers} from \"../../data/repository/userRepository\";\nimport {addUsers} from \"../../store/slices/usersSlice\";\n\n\nconst Home: React.FC = () => {\n\n    const currentUser = useSelector(selectUser);\n    const tweets = useSelector(selectTweets);\n    const dispatch = useDispatch();\n\n    const postTweet = async (text: string,image: File | null) => {\n        console.log(`DEBUG: postTweet is called and text is ${text}`);\n        await sendTweet(currentUser,image,text).then(result => {\n            dispatch(addTweet(result));\n        }).catch(e => {\n            console.log(`Error ${e} at postTweet`)\n        });\n    };\n\n    useEffect( () => {\n        fetchTweets(currentUser.uid).then(result => {\n            dispatch(addTweets(result));\n            fetchUsers(currentUser.uid).then(result => {\n                dispatch(addUsers(result));\n            }).catch(e => {\n                console.log(`Error: ${e}`)\n            });\n        }).catch(error => {\n            console.log(`DEBUG: Error is ${error}`)\n        })\n    },[dispatch]);\n\n    const likeTweetAction = (tweetId: string) => {\n        sendLikeTweet(currentUser.uid,tweetId).then(() => {\n            dispatch(likeTweet(tweetId));\n        }).catch(e => {\n            console.log(`Error: ${e}`);\n        })\n    };\n\n    const unLikeTweetAction = (tweetId: string) => {\n        sendUnLikeTweet(currentUser.uid,tweetId).then(() => {\n            dispatch(unLikeTweet(tweetId));\n        }).catch(e => {\n            console.log(`Error: ${e}`);\n        })\n    };\n\n    return (\n        <div className={styles.HomeContainer}>\n            <h1 className={styles.HomeTitle}>Home</h1>\n            <div className={styles.HomeTweetInputContainer}>\n                <TweetInput user={currentUser} sendTweetAction={postTweet}/>\n            </div>\n            <div className={styles.HomeBlankSpace}>\n\n            </div>\n            <div className={styles.HomeFeedContainer}>\n                {\n                    tweets.length == 0 ? (\n                        <div/>\n                    ) : <FeedContainer key={`FeedContainer_${currentUser.uid}`} tweets={tweets}\n                        likeTweetAction={likeTweetAction} unLikeTweetAction={unLikeTweetAction}\n                    />\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default Home;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/messages/Messages.tsx",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/profile/Profile.tsx",["225","226","227","228","229"],"import React, {useEffect, useState} from 'react';\nimport styles from \"../../styles/profile/Profile.module.css\";\nimport ArrowIcon from \"../../images/arrow.png\";\nimport { Switch,Route,NavLink,useHistory } from \"react-router-dom\";\nimport {User} from \"../../data/entities/User\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport FeedContainer from \"../shares/tweet/FeedContainer\";\nimport {selectProfile,addUser,addTweets,addLikeTweets,addCommentTweets,follow,unFollow,likeTweetByOption,unLikeTweetByOption} from \"../../store/slices/profileSlice\";\nimport {selectUser} from \"../../store/slices/userSlice\";\nimport LoadingPage from \"../LoadingPage\";\nimport { followUser,unFollowUser } from \"../../store/slices/usersSlice\";\n\nimport {\n    fetchIsFollowed,\n    fetchRelationshipStats, fetchUserCommentTweets,\n    fetchUserLikeTweets,\n    fetchUserPostTweets,\n} from \"../../data/repository/profileRepository\";\nimport {sendFollowUser, sendUnFollowUser} from \"../../data/repository/userRepository\";\nimport {sendLikeTweet, sendUnLikeTweet} from \"../../data/repository/tweetRepository\";\n\ninterface PROPS {\n    user: User\n}\n\nconst Profile: React.FC<PROPS> = (props) => {\n\n    const profile = useSelector(selectProfile);\n    const [isLoading,setIsLoading] = useState(true);\n    const currentUser = useSelector(selectUser);\n    const dispatch = useDispatch();\n    const history = useHistory();\n    document.title = `${props.user.fullname}`;\n\n    useEffect(() => {\n        setIsLoading(true);\n        const user = {\n            uid: props.user.uid,\n            fullname: props.user.fullname,\n            username: props.user.username,\n            profileImageUrl: props.user.profileImageUrl,\n            backgroundUrl: props.user.backgroundUrl,\n            bio: props.user.bio,\n            isCurrentUser: props.user.uid == currentUser.uid\n        };\n        const relationship = {\n            isFollowed: false,\n            following: 0,\n            followers: 0,\n        };\n        fetchIsFollowed(currentUser.uid,props.user.uid).then(result => {\n            relationship.isFollowed = result;\n            fetchRelationshipStats(props.user.uid).then(result => {\n                relationship.following = result.following;\n                relationship.followers = result.followers;\n                const payload = {user: user,relationship: relationship};\n                dispatch(addUser(payload));\n                fetchUserPostTweets(currentUser.uid,props.user.uid).then(result => {\n                    dispatch(addTweets(result));\n                    setIsLoading(false)\n                }).catch(e => {\n                    console.log(`Error: ${e} at Profile.tsx`)\n                })\n            }).catch(e => {\n                console.log(`Error: ${e}`)\n            })\n        }).catch(e => {\n            console.log(`Error: ${e}`)\n        });\n    },[dispatch]);\n\n\n    const handleLogoutButton = () => {\n        window.location.href = \"/logout\";\n    };\n\n    const handleEditProfileButton = () => {\n        window.location.href = \"/settings/profile\";\n    };\n\n    const handleFollowButton = () => {\n        sendFollowUser(currentUser.uid,profile.user.uid).then(() => {\n            dispatch(follow());\n            dispatch(followUser(profile.user.uid))\n        }).catch(e => {\n            console.log(`Error: ${e}`)\n        })\n    };\n\n    const handleFollowingButton = () => {\n        sendUnFollowUser(currentUser.uid,profile.user.uid).then(() => {\n            dispatch(unFollow());\n            dispatch(unFollowUser(profile.user.uid))\n        }).catch(e => {\n            console.log(`Error: ${e}`)\n        })\n    };\n\n    const likeTweetAction = (tweetId: string,type?: string) => {\n        if (type == undefined) return;\n        sendLikeTweet(currentUser.uid,tweetId).then(() => {\n            dispatch(likeTweetByOption({tweetId: tweetId,type: type}))\n        }).catch(e => {\n            console.log(`Error: ${e}`)\n        })\n    };\n\n    const unLikeTweetAction = (tweetId: string,type?: string) => {\n        if (type == undefined) return;\n        sendUnLikeTweet(currentUser.uid,tweetId).then(() => {\n            dispatch(unLikeTweetByOption({tweetId: tweetId,type: type}))\n        }).catch(e => {\n            console.log(`Error: ${e}`)\n        })\n    };\n\n    const handleLikesTweetsButton = () => {\n        fetchUserLikeTweets(props.user.uid,currentUser.uid).then(result => {\n            dispatch(addLikeTweets(result))\n        }).catch(e => {\n            console.log(`Error: ${e} at Profile.tsx`)\n        })\n    };\n\n    const handleCommentsTweetsButton = () => {\n        fetchUserCommentTweets(props.user.uid,currentUser.uid).then(result => {\n            dispatch(addCommentTweets(result))\n        }).catch(e => {\n            console.log(`Error: ${e} at Profile.tsx`)\n        })\n    };\n\n    const handleNavBackButton = (e: React.MouseEvent<HTMLImageElement>) => {\n        history.goBack();\n    };\n\n    return (\n        <>\n        {\n            isLoading ?\n                <LoadingPage/>\n                :\n                <div className={styles.ProfileContainer}>\n                    <div className={styles.ProfileNav}>\n                        <img src={ArrowIcon} alt=\"BackButton\" className={styles.ProfileNavBackButton} onClick={handleNavBackButton}/>\n                        <div className={styles.ProfileNavUserInfo}>\n                            <div className={styles.ProfileNavUsername}>{profile.user.fullname}</div>\n                            <div className={styles.ProfileNavTweetCount}>0 Tweets</div>\n                        </div>\n                    </div>\n                    <div className={styles.ProfileUserInformationContainer}>\n                        {/* backgroundURLの処理はあとで行う　*/}\n                        {profile.user.backgroundUrl.length == 0 ?\n                            <div className={styles.ProfileBackground}/>\n                            :\n                            <img src={profile.user.backgroundUrl} alt=\"BackgroundImage\" className={styles.ProfileBackgroundImage}/>\n                        }\n                        <img src={profile.user.profileImageUrl} alt=\"ProfileImage\" className={styles.ProfileImage}/>\n                        <div className={styles.ProfileButtonContainer}>\n                            {profile.user.isCurrentUser ? (<button className={styles.ProfileLogoutButton} onClick={handleLogoutButton}>Logout</button>)\n                                : <div className={styles.ProfileSpaceTag}/>}\n                            {profile.user.isCurrentUser && (\n                                <button className={styles.ProfileActionButton} onClick={handleEditProfileButton}>Edit profile</button>\n                            )}\n                            {!profile.user.isCurrentUser && profile.relationship.isFollowed && (\n                                <button className={styles.ProfileActionDoneButton} onClick={handleFollowingButton}>\n                                    <span className={styles.ProfileButtonTextNormal}>Following</span>\n                                    <span className={styles.ProfileButtonTextHover}>UnFollow</span>\n                                </button>\n                            )}\n                            {!profile.user.isCurrentUser && !profile.relationship.isFollowed && (\n                                <button className={styles.ProfileActionButton} onClick={handleFollowButton}>Follow</button>\n                            )}\n                        </div>\n                    </div>\n                    <div className={styles.ProfileFullname}>{profile.user.fullname}</div>\n                    <div className={styles.ProfileUsername}>@{profile.user.username}</div>\n                    <div className={styles.ProfileBio}>\n                        {profile.user.bio}\n                    </div>\n                    <div className={styles.ProfileUserStats}>\n                        <div className={styles.ProfileRelationShipContainer}>\n                            <div className={styles.ProfileRelationShipCount}>{profile.relationship.following}</div>\n                            <div className={styles.ProfileRelationShipText}> Following</div>\n                        </div>\n                        <div className={styles.ProfileRelationShipContainer}>\n                            <div className={styles.ProfileRelationShipCount}>{profile.relationship.followers}</div>\n                            <div className={styles.ProfileRelationShipText}> Followers</div>\n                        </div>\n                    </div>\n                    <div className={styles.ProfileFeedContainer}>\n                        <div className={styles.ProfileFeedTabContainer}>\n                            <NavLink exact to={`/${props.user.uid}`} className={styles.ProfileFeedTabItem}\n                                     activeClassName={styles.ProfileFeedTabItemSelected}>\n                                Tweets</NavLink>\n                            <NavLink exact to={`/${props.user.uid}/likes`} className={styles.ProfileFeedTabItem}\n                                     activeClassName={styles.ProfileFeedTabItemSelected} onClick={handleLikesTweetsButton}>\n                                Likes</NavLink>\n                            <NavLink exact to={`/${props.user.uid}/comments`} className={styles.ProfileFeedTabItem}\n                                     activeClassName={styles.ProfileFeedTabItemSelected} onClick={handleCommentsTweetsButton}>\n                                Comments</NavLink>\n                        </div>\n                        <div className={styles.ProfileFeedContentContainer}>\n                            <Switch>\n                                <Route exact path={`/${props.user.uid}`}>\n                                    <FeedContainer key={`userTweets_${currentUser.uid}`} tweets={profile.tweets}\n                                                    likeTweetAction={likeTweetAction} unLikeTweetAction={unLikeTweetAction} type={\"post\"}\n                                    />\n                                </Route>\n                                <Route exact path={`/${props.user.uid}/likes`}>\n                                    <FeedContainer key={`userLikes_${currentUser.uid}`} tweets={profile.likeTweets}\n                                                   likeTweetAction={likeTweetAction} unLikeTweetAction={unLikeTweetAction} type={\"like\"}\n                                    />\n                                </Route>\n                                <Route exact path={`/${props.user.uid}/comments`}>\n                                    <FeedContainer key={`userComments_${currentUser.uid}`} tweets={profile.commentTweets}\n                                                   likeTweetAction={likeTweetAction} unLikeTweetAction={unLikeTweetAction} type={\"comment\"}\n                                    />\n                                </Route>\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n        }\n        </>\n    );\n};\n\nexport default Profile;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/explore/Explore.tsx",["230","231","232","233","234"],"import React, {useEffect, useState} from 'react';\nimport styles from \"../../styles/explore/Explore.module.css\";\nimport SearchIcon from \"../../images/search_icon.png\";\nimport {NavLink,Switch,Route,useLocation} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectTweets,searchTweets,likeTweet,unLikeTweet} from \"../../store/slices/tweetsSlice\";\nimport FeedContainer from \"../shares/tweet/FeedContainer\";\nimport UsersContainer from \"../shares/users/UsersContainer\";\nimport {selectUsers,addUsers,searchUsers,followUser,unFollowUser} from \"../../store/slices/usersSlice\";\nimport {selectUser} from \"../../store/slices/userSlice\";\nimport {fetchUsers, sendFollowUser, sendUnFollowUser} from \"../../data/repository/userRepository\";\nimport {sendLikeTweet, sendUnLikeTweet} from \"../../data/repository/tweetRepository\";\n\nconst Explore: React.FC = () => {\n\n    const currentUser = useSelector(selectUser);\n    const tweets = useSelector(selectTweets);\n    const users = useSelector(selectUsers);\n    const dispatch = useDispatch();\n    const [keyword,setKeyword] = useState<string>(\"\");\n    const [isFocus,setIsFocus] = useState<boolean>(false);\n    const [isSearch,setIsSearch] = useState<boolean>(false);\n    const location = useLocation();\n\n    useEffect(() => {\n        console.log(`DEBUG: useEffect is called at Explore.tsx`);\n        if (location.pathname.includes(\"search\")) {\n            const searchWord = location.search.substr(3);\n            setIsSearch(true);\n            setKeyword(searchWord);\n            dispatch(searchUsers(searchWord));\n            dispatch(searchTweets(searchWord));\n        }\n    },[dispatch]);\n\n    const handleChangeKeyword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setKeyword(e.target.value);\n    };\n\n    const handleOnKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key == \"Enter\") {\n            e.preventDefault();\n            if (keyword.length != 0) {\n                window.location.href = `/explore/search?q=${keyword}`\n            }\n        }\n    };\n\n    const likeTweetAction = (tweetId: string) => {\n        sendLikeTweet(currentUser.uid,tweetId).then(() => {\n            dispatch(likeTweet(tweetId));\n        }).catch(e => {\n            console.log(`Error: ${e}`);\n        })\n    };\n\n    const unLikeTweetAction = (tweetId: string) => {\n        sendUnLikeTweet(currentUser.uid,tweetId).then(() => {\n            dispatch(unLikeTweet(tweetId));\n        }).catch(e => {\n            console.log(`Error: ${e}`);\n        })\n    };\n\n    const followAction = (uid: string) => {\n        sendFollowUser(currentUser.uid,uid).then(() => {\n            dispatch(followUser(uid));\n        }).catch(e => {\n            console.log(`Error: ${e}`)\n        });\n    };\n\n    const unFollowAction = (uid: string) => {\n        sendUnFollowUser(currentUser.uid,uid).then(() => {\n            dispatch(unFollowUser(uid));\n        }).catch(e => {\n            console.log(`Error: ${e}`)\n        });\n    };\n\n    return (\n        <div className={styles.ExploreContainer}>\n            <div className={styles.ExploreSearchContainer}>\n                <form className={isFocus ? styles.ExploreSearchFormOnFocus : styles.ExploreSearchForm}>\n                    <img src={SearchIcon} alt=\"SearchIcon\" className={isFocus ?  styles.ExploreSearchIconOnFocus : styles.ExploreSearchIcon}/>\n                    <input type=\"text\" placeholder=\"Search Twitter\" className={styles.ExploreSearchInput}\n                           onFocus={() => setIsFocus(true)} onBlur={() => setIsFocus(false)} onKeyPress={handleOnKeyPress}\n                           value={keyword} onChange={handleChangeKeyword}\n                    />\n                </form>\n            </div>\n            <div className={styles.ExploreTabContainer}>\n                {\n                    isSearch ?\n                        (\n                            <>\n                                <NavLink exact to={`/explore/search?q=${keyword}`} className={styles.ExploreTabItem} activeClassName={styles.ExploreTabItemSelected}>\n                                    Tweets\n                                </NavLink>\n                                <NavLink exact to={`/explore/users/search?q=${keyword}`} className={styles.ExploreTabItem} activeClassName={styles.ExploreTabItemSelected}>\n                                    Users\n                                </NavLink>\n                            </>\n                        )\n                        :\n                        (\n                            <>\n                                <NavLink exact to=\"/explore\" className={styles.ExploreTabItem} activeClassName={styles.ExploreTabItemSelected}>\n                                    Tweets\n                                </NavLink>\n                                <NavLink exact to=\"/explore/users\" className={styles.ExploreTabItem} activeClassName={styles.ExploreTabItemSelected}>\n                                    Users\n                                </NavLink>\n                            </>\n                    )\n                }\n            </div>\n            <div className={styles.ExploreContainer}>\n                <Switch>\n                    <Route exact path=\"/explore\">\n                        <FeedContainer key=\"explore_tweets\" tweets={tweets} likeTweetAction={likeTweetAction} unLikeTweetAction={unLikeTweetAction}/>\n                    </Route>\n                    <Route path=\"/explore/search\">\n                        <FeedContainer key=\"explore_tweets\" tweets={tweets} likeTweetAction={likeTweetAction} unLikeTweetAction={unLikeTweetAction}/>\n                    </Route>\n                    <Route exact path=\"/explore/users\">\n                        <UsersContainer key=\"explore_users\" users={users} followAction={followAction} unFollowAction={unFollowAction}/>\n                    </Route>\n                    <Route path=\"/explore/users/search\">\n                        <UsersContainer key=\"explore_users\" users={users} followAction={followAction} unFollowAction={unFollowAction}/>\n                    </Route>\n                </Switch>\n            </div>\n        </div>\n    );\n};\n\nexport default Explore;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/utils/Utils.ts",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/home/TweetInput.tsx",["235","236","237"],"import React, {useState} from 'react';\nimport styles from \"../../styles/home/TweetInput.module.css\";\nimport PhotoIcon from \"../../images/photo_image_icon.png\";\nimport XIcon from \"../../images/x_icon.png\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport {User} from \"../../data/entities/User\";\n\ntype TSendTweetFunction = (text: string,image: File | null) => void;\n\ninterface PROPS {\n    user: User\n    sendTweetAction: TSendTweetFunction\n}\n\ninterface IError {\n    error: Error | null,\n    message: string | null\n}\n\nconst TweetInput: React.FC<PROPS> = (props) => {\n\n    const [text,setText] = useState(\"\");\n    const [image,setImage] = useState<File | null>(null);\n    const [imageUrl,setImageUrl] = useState<string | null>(null);\n    const [textCount,setTextCount] = useState(\"0/140\");\n    const [error,setError] = useState<IError>({ error: null,message: null });\n\n    const handleText = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setText(e.target.value);\n        const newTextCount = `${e.target.value.length}/140`;\n        setTextCount(newTextCount);\n    };\n\n    const handleChangeImage = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const files = e.target.files;\n        if (files != null && files.length !== 0) {\n            setImage(files[0]);\n            setImageUrl(window.URL.createObjectURL(files[0]))\n        }\n    };\n\n    const handleRemoveImage = (e: React.MouseEvent<HTMLImageElement>) => {\n        setImage(null);\n        setImageUrl(\"\");\n    };\n\n    const postTweet = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        props.sendTweetAction(text,image);\n        clearStates()\n    };\n\n    const clearStates = () => {\n        setText(\"\");\n        setTextCount(\"0/140\");\n        setImage(null);\n        setImageUrl(null)\n    };\n\n    return (\n        <div className={styles.TweetInputContainer}>\n            <img src={props.user.profileImageUrl} alt=\"ProfileImage\" className={styles.TweetInputProfileImage}/>\n            <form className={styles.TweetInputContent} onSubmit={postTweet}>\n                <TextareaAutosize placeholder=\"What's happening?\" className={styles.TweetInputTextField} value={text} onChange={handleText}/>\n                {/*  写真が選択されている場合は表示する、それ以外は空タブになる  */}\n                { imageUrl ?\n                    <div className={styles.TweetInputImageContainer}>\n                        <img src={imageUrl} alt=\"image\" className={styles.TweetInputSelectedImage}/>\n                        <img src={XIcon} alt=\"XIcon\" className={styles.TweetInputXIcon} onClick={handleRemoveImage}/>\n                    </div>\n                : <></> }\n                <div className={styles.TweetInputContentFooter}>\n                    <label className={styles.TweetInputPhotoSelectButton}>\n                        <span>\n                            <img src={PhotoIcon} alt=\"PhotoSelectedButton\" className={styles.TweetInputPhotoIcon}/>\n                        </span>\n                        <input type=\"file\" className={styles.TweetInputPhotoInput} onChange={handleChangeImage} accept=\"image/*\"/>\n                    </label>\n                    <div className={styles.TweetInputFooterInner}>\n                        <p className={styles.TweetInputTextCount}>{textCount}</p>\n                        <button type=\"submit\" className={styles.TweetInputPostButton}>\n                            Tweet\n                        </button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default TweetInput;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/shares/tweet/FeedContainer.tsx",["238","239","240"],"import React, {useEffect} from 'react';\nimport styles from \"../../../styles/shares/tweet/FeedContainer.module.css\";\nimport TweetCell from \"./TweetCell\";\nimport {Tweet} from \"../../../data/entities/Tweet\";\nimport {TLikeTweetAction, TUnLikeTweetAction} from \"../../../store/slices/tweetsSlice\";\n\ninterface PROPS {\n    tweets: Tweet[]\n    likeTweetAction: TLikeTweetAction\n    unLikeTweetAction: TUnLikeTweetAction\n    type?: string\n}\n\nconst FeedContainer: React.FC<PROPS> = (props) => {\n\n    const feed = props.tweets.map((tweet) => (\n        <div className={styles.FeedContainerTweetCell} key={tweet.id}>\n            <TweetCell key={tweet.id} tweet={tweet} likeTweetAction={props.likeTweetAction} unLikeTweetAction={props.unLikeTweetAction} type={props.type}/>\n        </div>\n    ));\n\n    return (\n        <div className={styles.FeedContainer}>\n            {\n                (props.tweets.length == 0 || props.tweets[0].id == \"\") ?\n                <div/> : feed\n            }\n        </div>\n    );\n};\n\nexport default FeedContainer;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/shares/tweet/TweetCell.tsx",["241"],"import React from 'react';\nimport styles from \"../../../styles/shares/tweet/TweetCell.module.css\";\nimport HeartIcon from \"../../../images/heart_icon.png\";\nimport HeartLikedIcon from \"../../../images/heart_liked_icon.png\";\nimport CommentIcon from \"../../../images/comment_icon.png\";\nimport SaveIcon from \"../../../images/save_icon.png\";\nimport {Tweet} from \"../../../data/entities/Tweet\";\nimport {TLikeTweetAction, TUnLikeTweetAction} from \"../../../store/slices/tweetsSlice\";\n\ninterface PROPS {\n    tweet: Tweet\n    likeTweetAction: TLikeTweetAction\n    unLikeTweetAction: TUnLikeTweetAction\n    type?: string\n}\n\nconst TweetCell: React.FC<PROPS> = (props) => {\n\n    const likeTweetAction = (e: React.MouseEvent<HTMLImageElement>) => {\n        e.stopPropagation();\n        props.likeTweetAction(props.tweet.id,props.type)\n    };\n\n    const unLikeTweetAction = (e: React.MouseEvent<HTMLImageElement>) => {\n        e.stopPropagation();\n        props.unLikeTweetAction(props.tweet.id,props.type)\n    };\n\n    const handleCommentButton = (e: React.MouseEvent<HTMLImageElement>) => {\n        e.stopPropagation();\n    };\n\n    const handleTweetCellClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        window.location.href = `/${props.tweet.username}/status/${props.tweet.id}`;\n    };\n\n    return (\n        <div className={styles.TweetCellContainer} onClick={handleTweetCellClick}>\n            <img src={props.tweet.profileImageUrl} alt=\"ProfileIcon\" className={styles.TweetCellProfileImage}/>\n            <div className={styles.TweetCellContentContainer}>\n                <div className={styles.TweetCellTweetInfo}>\n                    <div className={styles.TweetCellFullname}>{props.tweet.fullname}</div>\n                    <div className={styles.TweetCellUsername}>@{props.tweet.username} • {props.tweet.timestamp}</div>\n                </div>\n                <div className={styles.TweetCellText}>\n                    {props.tweet.text}\n                </div>\n                {\n                    props.tweet.imageUrl.length != 0 ?\n                        <img src={props.tweet.imageUrl} alt=\"PostImage\" className={styles.TweetCellImage}/>\n                        :\n                        <></>\n                }\n                <div className={styles.TweetCellActionBar}>\n                    <div className={styles.TweetCellActionItem}>\n                        <img src={CommentIcon} alt=\"ActionIcon\" className={styles.TweetCellActionItemImage} onClick={handleCommentButton}/>\n                        <div className={styles.TweetCellActionItemCount}>{props.tweet.comments}</div>\n                    </div>\n                    <div className={styles.TweetCellActionItem}>\n                        {\n                            props.tweet.isLiked ?\n                                <img src={HeartLikedIcon} alt=\"ActionIcon\"\n                                     className={styles.TweetCellHeartLikedIcon}\n                                     onClick={unLikeTweetAction}/>\n                                     :\n                                <img src={HeartIcon} alt=\"ActionIcon\"\n                                     className={styles.TweetCellHeartIcon}\n                                     onClick={likeTweetAction}/>\n                        }\n                        <div className={styles.TweetCellActionItemLikedCount}>{props.tweet.likes}</div>\n                    </div>\n                    <div className={styles.TweetCellActionItem}>\n                        <img src={SaveIcon} alt=\"ActionIcon\" className={styles.TweetCellActionItemImage}/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default TweetCell;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/entities/User.ts",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/slices/tweetsSlice.ts",["242","243","244","245","246"],"import {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\nimport {RootState} from \"../store\";\nimport {Tweet} from \"../../data/entities/Tweet\";\nimport firebase from \"firebase/app\";\nimport {FirestoreTimestampToString} from \"../../utils/Utils\";\n\nconst nowDate = new Date();\n\nexport const tweetsSlice = createSlice({\n    name: \"tweets\", // sliceの名称\n    initialState: {\n        // sliceの初期値\n        tweets: [{\n            id:\"\",uid:\"\",fullname:\"\",username:\"\",profileImageUrl:\"\",\n            text:\"\",imageUrl:\"\",timestamp: FirestoreTimestampToString(nowDate),likes: 0,comments: 0,isLiked: false\n        }]\n    },\n    // Stateに対して更新処理を定義する場所\n    reducers: {\n        // ここで定義した物がAction Creator関数の名前となる\n        addTweets: (state,action) => {\n            state.tweets = action.payload;\n        },\n        addTweet: (state,action) => {\n            const newTweets = state.tweets;\n            newTweets.unshift(action.payload);\n            state.tweets = newTweets\n        },\n        searchTweets: (state,action: {payload: string}) => {\n            const keyword = action.payload.toLowerCase();\n            state.tweets = state.tweets.filter(tweet => (\n                tweet.username.toLowerCase().includes(keyword) || tweet.fullname.toLowerCase().includes(keyword) ||\n                tweet.text.toLowerCase().includes(keyword)\n            ))\n        },\n        likeTweet: (state,action) => {\n            const tweetId = action.payload;\n            state.tweets = state.tweets.map(tweet => {\n                if (tweet.id == tweetId) {\n                    tweet.isLiked = true;\n                    tweet.likes += 1;\n                }\n                return tweet;\n            })\n        },\n        unLikeTweet: (state,action) => {\n            const tweetId = action.payload;\n            state.tweets = state.tweets.map(tweet => {\n                if (tweet.id == tweetId) {\n                    tweet.isLiked = false;\n                    tweet.likes -= 1;\n                }\n                return tweet;\n            })\n        }\n    }\n});\n\nexport const { addTweets,addTweet,searchTweets,likeTweet,unLikeTweet } = tweetsSlice.actions;\n\nexport const selectTweets = (state: RootState) => state.tweets.tweets;\n\nexport default tweetsSlice.reducer;\n\nexport type TLikeTweetAction = (tweetId: string,type?: string) => void;\nexport type TUnLikeTweetAction = (tweetId: string,type?: string) => void;\n","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/repository/tweetRepository.ts",["247","248","249","250"],"import {tweetCommentsRef, tweetLikedUserRef, tweetRef, tweetsRef, userLikesTweetRef} from \"../../config/firebase\";\nimport {buildTweet, Tweet} from \"../entities/Tweet\";\nimport {User} from \"../entities/User\";\nimport {FirestoreTimestampToString, readNowTimestamp, uploadImage} from \"../../utils/Utils\";\nimport firebase from \"firebase/app\";\nimport {buildComment, Comment} from \"../entities/Comment\";\n\n/*\n* Data Structure\n* posts -> likes -> userId\n*                -> userId\n*\n*       -> comments -> data\n*\n* */\n// type Tweets = Tweet[]\n\nexport const fetchTweets = async (currentUid: string): Promise<Tweet[]> => {\n    try {\n        const tweetDocs = tweetsRef.orderBy(\"timestamp\",\"desc\");\n        const tweets = await fetchTweetsByOption(tweetDocs,currentUid);\n        return Promise.resolve(tweets)\n    } catch (e) {\n        return Promise.reject(e)\n    }\n};\n\ninterface ITweetDetail {\n    tweet: Tweet\n    comments: Comment[]\n}\n\nexport const fetchTweetDetail = async (tweetId: string,currentUid: string): Promise<ITweetDetail> => {\n    try {\n        const tweetDoc = await tweetRef(tweetId).get();\n        const likeDocs = await tweetLikedUserRef(tweetId).get();\n        const commentDocs = await tweetCommentsRef(tweetId).get();\n        const isLiked = likeDocs.docs.filter(doc => {\n            return doc.id == currentUid\n        }).length != 0;\n        const tweet = buildTweet(tweetDoc.data()!,likeDocs.size,commentDocs.size,isLiked);\n        const comments: Comment[] = commentDocs.docs.map(doc => {\n            return buildComment(doc.data())\n        });\n        const tweetDetail: ITweetDetail = {tweet: tweet,comments: comments};\n        return Promise.resolve(tweetDetail)\n    } catch (e) {\n        return Promise.reject(e);\n    }\n};\n\nexport const fetchTweetsByOption = async (ref: firebase.firestore.Query<firebase.firestore.DocumentData>,currentUid: string): Promise<Tweet[]> => {\n    try {\n        const tweetDocs = await ref.get();\n        let tweets: Tweet[] = [];\n        // ここでPromiseを返す配列を作成する。Promise自体を返すわけではないので await を利用しても意味がない\n        const tweetsPromises = tweetDocs.docs.map(async doc => {\n            const likeDocs = await doc.ref.collection(\"likes\").get();\n            const commentDocs = await doc.ref.collection(\"comments\").get();\n            const isLikedDocs = likeDocs.docs.filter(doc => {\n                return doc.id == currentUid\n            });\n            const isLiked = isLikedDocs.length != 0; // isLikedDocsはいいねしたユーザーのUidのDocumentを取得する\n            const tweet = buildTweet(doc.data(),likeDocs.size,commentDocs.size,isLiked);\n            tweets = tweets.concat(tweet)\n        });\n        // ここで配列のPromiseをそれぞれ非同期で実行する。それぞれ Promise を返すので await で処理が終了するまで待つ\n        await Promise.all(tweetsPromises);\n        return Promise.resolve(tweets)\n    } catch (e) {\n        return Promise.reject(e)\n    }\n};\n\nexport const sendTweet = async (user: User,file: File | null,text: string): Promise<Tweet> => {\n    let url = \"\";\n    if (file != null) {\n        url = await uploadImage(file,\"tweet\",user.uid)\n    }\n    try {\n        const tweetRef = tweetsRef.doc();\n        const data = { id: tweetRef.id,uid: user.uid,fullname: user.fullname,username: user.username,\n            profileImageUrl: user.profileImageUrl,text: text,imageUrl: url,timestamp: readNowTimestamp()};\n        await tweetRef.set(data);\n        const tweet: Tweet = { id: data.id,uid: data.uid,fullname: data.fullname,username: data.username,\n            profileImageUrl: data.profileImageUrl,text: data.text,imageUrl: url,timestamp: FirestoreTimestampToString(new Date()),likes: 0,comments: 0,isLiked: false};\n        return  Promise.resolve(tweet)\n    } catch (e) {\n        console.log(`DEBUG: ${e} at sendTweet`);\n        return Promise.reject(e)\n    }\n};\n\nexport const sendLikeTweet = async (currentUid: string,tweetId: string): Promise<void> => {\n    try {\n        await userLikesTweetRef(currentUid).doc(tweetId).set({});\n        await tweetLikedUserRef(tweetId).doc(currentUid).set({});\n        return Promise.resolve();\n    } catch (e) {\n        return Promise.reject(e);\n    }\n};\n\nexport const sendUnLikeTweet = async (currentUid: string,tweetId: string): Promise<void> => {\n    try {\n        await userLikesTweetRef(currentUid).doc(tweetId).delete();\n        await tweetLikedUserRef(tweetId).doc(currentUid).delete();\n        return Promise.resolve();\n    } catch (e) {\n        return Promise.reject(e);\n    }\n};\n\n\n\n\n","/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/entities/Tweet.ts",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/slices/profileSlice.ts",["251","252","253","254","255","256","257","258"],"import {createSlice} from \"@reduxjs/toolkit\";\nimport {RootState} from \"../store\";\nimport {FirestoreTimestampToString} from \"../../utils/Utils\";\nimport {Tweet} from \"../../data/entities/Tweet\";\n\nconst nowDate = new Date();\n\nconst initialTweets = [{\n    id:\"\",uid:\"\",fullname:\"\",username:\"\",profileImageUrl:\"\",\n    text:\"\",imageUrl:\"\",timestamp: FirestoreTimestampToString(nowDate),likes: 0,comments: 0,isLiked: false\n}];\n\nexport const profileSlice = createSlice({\n    name: \"profile\", // sliceの名称\n    initialState: {\n        // sliceの初期値\n        user: {\n            uid: \"\",\n            fullname: \"\",\n            username: \"\",\n            profileImageUrl: \"\",\n            backgroundUrl: \"\",\n            bio: \"\",\n            isCurrentUser: false\n        },\n        relationship: {\n            isFollowed: false,\n            following: 0,\n            followers: 0,\n        },\n        tweets: initialTweets,\n        likeTweets: initialTweets,\n        commentTweets: initialTweets,\n    },\n    // Stateに対して更新処理を定義する場所\n    reducers: {\n        // ここで定義した物がAction Creator関数の名前となる\n        addUser: (state,action) => {\n            console.log(`DEBUG: action.payload.user is ${action.payload.user}`);\n            state.user = action.payload.user;\n            state.relationship = action.payload.relationship;\n        },\n        follow: (state) => {\n            state.relationship.isFollowed = true;\n            state.relationship.followers = state.relationship.followers + 1\n        },\n        unFollow: (state) => {\n            state.relationship.isFollowed = false;\n            state.relationship.followers = state.relationship.followers - 1\n        },\n        addTweets: (state,action) => {\n            state.tweets = action.payload\n        },\n        addLikeTweets: (state,action) => {\n            state.likeTweets = action.payload\n        },\n        addCommentTweets: (state,action) => {\n            state.commentTweets = action.payload\n        },\n        updateUserProfile: (state,action) => {\n            state.user = action.payload;\n        },\n        likeTweetByOption: (state,action: {payload: {tweetId: string,type: string}}) => {\n            const type = action.payload.type;\n            if (type == \"post\") {\n                state.tweets = likeTweetByType(state.tweets,action.payload.tweetId)\n            } else if (type == \"like\") {\n                state.likeTweets = likeTweetByType(state.likeTweets,action.payload.tweetId)\n            } else if (type == \"comment\") {\n                state.commentTweets = likeTweetByType(state.commentTweets,action.payload.tweetId)\n            }\n        },\n        unLikeTweetByOption: (state,action: {payload: {tweetId: string,type: string}}) => {\n            const type = action.payload.type;\n            if (type == \"post\") {\n                state.tweets = unLikeTweetByType(state.tweets,action.payload.tweetId)\n            } else if (type == \"like\") {\n                state.likeTweets = unLikeTweetByType(state.likeTweets,action.payload.tweetId)\n            } else if (type == \"comment\") {\n                state.commentTweets = unLikeTweetByType(state.commentTweets,action.payload.tweetId)\n            }\n        },\n    }\n});\n\nconst likeTweetByType = (tweets: Tweet[],tweetId: string): Tweet[] => {\n    return tweets.map(tweet => {\n        if (tweet.id == tweetId) {\n            tweet.isLiked = true;\n            tweet.likes += 1;\n        }\n        return tweet\n    });\n};\n\nconst unLikeTweetByType = (tweets: Tweet[],tweetId: string): Tweet[] => {\n    return tweets.map(tweet => {\n        if (tweet.id == tweetId) {\n            tweet.isLiked = false;\n            tweet.likes -= 1;\n        }\n        return tweet\n    });\n};\n\n\n\nexport const { addUser,follow,unFollow,addTweets,addLikeTweets,addCommentTweets,updateUserProfile,likeTweetByOption,unLikeTweetByOption } = profileSlice.actions;\n\nexport const selectProfile = (state: RootState) => state.profile;\n\nexport default profileSlice.reducer;\n","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/auth/Logout.tsx",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/repository/profileRepository.ts",["259","260"],"import {\n    followersRef,\n    followingRef,\n    tweetsRef,\n    userCommentsTweetRef,\n    userLikesTweetRef,\n    userRef\n} from \"../../config/firebase\";\nimport {Tweet} from \"../entities/Tweet\";\nimport {fetchTweetsByOption} from \"./tweetRepository\";\nimport {UpdateCredential} from \"./userRepository\";\nimport {User} from \"../entities/User\";\nimport {uploadImage} from \"../../utils/Utils\";\n\n\nexport const fetchIsFollowed = async (currentUid: string,uid: string): Promise<boolean> => {\n    try {\n        const ref = await followingRef(currentUid).doc(uid).get();\n        return Promise.resolve(ref.exists)\n    } catch (e) {\n        return Promise.reject(e)\n    }\n};\n\ninterface RelationshipStats {\n    following: number;\n    followers: number;\n}\n\nexport const fetchRelationshipStats = async (uid: string): Promise<RelationshipStats> => {\n    try {\n        const followingDocs = await followingRef(uid).get();\n        const followersDocs = await followersRef(uid).get();\n        const stats: RelationshipStats = {\n            following: followingDocs.docs.length,\n            followers: followersDocs.docs.length,\n        };\n        return Promise.resolve(stats)\n    } catch (e) {\n        return Promise.reject(e)\n    }\n};\n\nexport const fetchUserPostTweets = async (currentUid: string,uid: string): Promise<Tweet[]> => {\n    try {\n        const tweetDocs = tweetsRef.where(\"uid\",\"==\",uid);\n        const tweets = await fetchTweetsByOption(tweetDocs,currentUid);\n        //console.log(`DEBUG: tweets[0].id is ${tweets[0].id} at fetchUserPostTweets`);\n        return Promise.resolve(tweets)\n    } catch (e) {\n        return Promise.reject(e)\n    }\n};\n\nexport const fetchUserLikeTweets = async (uid: string,currentUid: string): Promise<Tweet[]> => {\n    try {\n        let tweets: Tweet[] = [];\n        const userLikesTweetDocs = await userLikesTweetRef(uid).get();\n        if (userLikesTweetDocs.docs.length == 0) {\n            return Promise.resolve(tweets)\n        }\n        const likeTweetIds = userLikesTweetDocs.docs.map((doc => doc.id));\n        const tweetDocs = tweetsRef.where(\"id\",\"in\",likeTweetIds);\n        tweets = await fetchTweetsByOption(tweetDocs, currentUid);\n        return Promise.resolve(tweets)\n    } catch (e) {\n        return Promise.reject(e)\n    }\n};\n\nexport const fetchUserCommentTweets = async (uid: string,currentUid: string): Promise<Tweet[]> => {\n    try {\n        let tweets: Tweet[] = [];\n        const userCommentTweetDocs = await userCommentsTweetRef(uid).get();\n        if (userCommentTweetDocs.docs.length == 0) {\n            return Promise.resolve(tweets)\n        }\n        const commentTweetIds = userCommentTweetDocs.docs.map((doc => doc.id));\n        const tweetDocs = tweetsRef.where(\"id\",\"in\",commentTweetIds);\n        tweets = await fetchTweetsByOption(tweetDocs, currentUid);\n        return Promise.resolve(tweets)\n    } catch (e) {\n        return Promise.reject(e)\n    }\n};\n\nexport const updateProfile = async (currentUser: User,credential: UpdateCredential): Promise<User> => {\n    try {\n        let profileImageUrl = currentUser.profileImageUrl;\n        let backgroundUrl = currentUser.backgroundUrl;\n        if (credential.profileImage != null) {\n            profileImageUrl = await uploadImage(credential.profileImage,\"profile_image\",currentUser.uid)\n        }\n        if (credential.backgroundImage != null) {\n            backgroundUrl = await uploadImage(credential.backgroundImage,\"background_image\",currentUser.uid)\n        }\n        await userRef(currentUser.uid).update({\n            fullname: credential.fullname,username: credential.username,bio: credential.bio,\n            profileImageUrl: profileImageUrl,backgroundUrl: backgroundUrl\n        });\n        const user: User = {\n            uid: currentUser.uid,fullname: credential.fullname,username: credential.username,\n            bio: credential.bio,profileImageUrl: profileImageUrl,backgroundUrl: backgroundUrl\n        };\n        return Promise.resolve(user);\n    } catch (e) {\n        console.log(`Error: ${e} at profileRepository`);\n        return Promise.reject(e)\n    }\n};\n\n\n\n\n/*\n* Data Structure\n* pattern 1\n* users -> uid -> followers -> uid\n*              -> following -> uid\n*\n* pattern 2\n* following -> uid -> uid\n* followers -> uid -> uid\n*\n* Test 1\n* user1 user2 user3\n*\n*\n* */","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/profile/ProfileUpdate.tsx",["261","262"],"import React, {useState} from 'react';\nimport styles from \"../../styles/profile/ProfileUpdate.module.css\";\nimport {User} from \"../../data/entities/User\";\nimport Profile from \"./Profile\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectUser,updateUser} from \"../../store/slices/userSlice\";\nimport CameraIcon from \"../../images/camera_icon.png\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport {UpdateCredential} from \"../../data/repository/userRepository\";\nimport {selectProfile,updateUserProfile} from \"../../store/slices/profileSlice\";\nimport {updateProfile} from \"../../data/repository/profileRepository\";\nimport LoadingPage from \"../LoadingPage\";\n\ninterface PROPS {\n    user: User\n}\n\nconst ProfileUpdate: React.FC<PROPS> = (props) => {\n\n    const currentUser = useSelector(selectUser);\n    const profile = useSelector(selectProfile);\n    const dispatch = useDispatch();\n    const [credential,setCredential] = useState<UpdateCredential>({\n        uid: props.user.uid,fullname: props.user.fullname,username: props.user.username,\n        bio: props.user.bio ? props.user.bio : \"\",profileImage: null,backgroundImage: null\n    });\n    const [isLoading,setIsLoading] = useState<boolean>(false);\n\n    document.title = `${props.user.fullname} / settings`;\n\n    const handleClickBack = () => {\n        window.location.href =  `/${currentUser.uid}`\n    };\n\n    const handleCredential = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const name = e.target.name;\n        const value = e.target.value;\n        const newCred = { ...credential,[name]: value };\n        setCredential(newCred)\n    };\n\n    const handleChangeImage = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const files = e.target.files;\n        if (files != null && files.length !== 0) {\n            const newCred = {...credential,[e.target.name]: files[0]};\n            setCredential(newCred)\n        }\n    };\n\n    const handleBio = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        const newCred = {...credential,bio: e.target.value};\n        setCredential(newCred);\n    };\n\n    const handleClickSave = (e: React.FormEvent<HTMLFormElement>) => {\n        setIsLoading(true);\n        e.preventDefault();\n        updateProfile(currentUser,credential).then(result => {\n            dispatch(updateUser(result));\n            dispatch(updateUserProfile(result));\n            setIsLoading(false);\n            window.location.href =  `/${currentUser.uid}`\n        }).catch(e => {\n            setIsLoading(false);\n            console.log(`Error: ${e} at ProfileUpdate.tsx`);\n        });\n    };\n\n    return (\n        <>\n        {\n            isLoading ?\n                (<LoadingPage/>)\n                :\n                <div className={styles.ProfileUpdateContainer}>\n                    <div className={styles.ProfileContainer} onClick={handleClickBack}>\n                        <Profile user={props.user}/>\n                    </div>\n                    <form className={styles.ProfileUpdateContent} onSubmit={handleClickSave}>\n                        <div className={styles.ProfileUpdateHeader}>\n                            <div className={styles.ProfileUpdateHeaderInner}>\n                                <button className={styles.ProfileUpdateXIcon} type=\"reset\" onClick={handleClickBack}>×\n                                </button>\n                                <div className={styles.ProfileUpdateTitle}>\n                                    Edit Profile\n                                </div>\n                            </div>\n                            <button type=\"submit\" className={styles.ProfileUpdateSaveButton}>\n                                Save\n                            </button>\n                        </div>\n                        <div className={styles.ProfileUpdateBackground}>\n                            {/* 既に画像がある場合、もしくは画像を選択した時　*/}\n                            {credential.backgroundImage != null && (\n                                <img src={window.URL.createObjectURL(credential.backgroundImage)} alt=\"BackgroundImage\"\n                                     className={styles.ProfileUpdateBackgroundImageSelected}/>)}\n                            {props.user.backgroundUrl != \"\" && credential.backgroundImage == null && (\n                                <img src={props.user.backgroundUrl} alt=\"BackgroundImage\"\n                                     className={styles.ProfileUpdateBackgroundImageSelected}/>)}\n                            <label className={styles.ProfileUpdateBackgroundButton}>\n                        <span>\n                            <img src={CameraIcon} alt=\"PhotoSelectedButton\" className={styles.ProfileUpdateCameraIcon}/>\n                        </span>\n                                <input type=\"file\" className={styles.ProfileUpdateImageInput} name=\"backgroundImage\"\n                                       accept=\"image/*\" onChange={handleChangeImage}/>\n                            </label>\n                        </div>\n                        <div className={styles.ProfileUpdateImageContainer}>\n                            {credential.profileImage != null ?\n                                (<img src={window.URL.createObjectURL(credential.profileImage)} alt=\"Profile\"\n                                      className={styles.ProfileUpdateProfileImageSelected}/>)\n                                :\n                                (<img src={props.user.profileImageUrl} alt=\"Profile\"\n                                      className={styles.ProfileUpdateProfileImageSelected}/>)\n                            }\n                            <label className={styles.ProfileUpdateImageButton}>\n                        <span>\n                            <img src={CameraIcon} alt=\"PhotoSelectedButton\"\n                                 className={styles.ProfileUpdateSmallCameraIcon}/>\n                        </span>\n                                <input type=\"file\" className={styles.ProfileUpdateImageInput} name=\"profileImage\"\n                                       accept=\"image/*\" onChange={handleChangeImage}/>\n                            </label>\n                        </div>\n                        <div className={styles.ProfileUpdateTextContainer}>\n                            <input type=\"text\" className={styles.ProfileUpdateFullnameTextField} name=\"fullname\"\n                                   value={credential.fullname} onChange={handleCredential}/>\n                            <input type=\"text\" className={styles.ProfileUpdateUsernameTextField} name=\"username\"\n                                   value={credential.username} onChange={handleCredential}/>\n                            <TextareaAutosize className={styles.ProfileUpdateBioTextArea} name=\"bio\"\n                                              value={credential.bio} onChange={handleBio}/>\n                        </div>\n                    </form>\n                </div>\n        }\n        </>\n    );\n};\n\nexport default ProfileUpdate;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/shares/users/UsersContainer.tsx",["263","264"],"import React from 'react';\nimport {UserInfo} from \"../../../data/entities/User\";\nimport styles from \"../../../styles/shares/users/UsersContainer.module.css\";\nimport UserCell from \"./UserCell\";\nimport {TFollowAction, TUnFollowAction} from \"../../../store/slices/usersSlice\";\n\n\ninterface PROPS {\n    users: UserInfo[]\n    followAction: TFollowAction\n    unFollowAction: TUnFollowAction\n}\n\nconst UsersContainer: React.FC<PROPS> = (props) => {\n\n    const usersFeed = props.users.map(user => (\n        <div className={styles.UsersContainerUserCell} key={user.user.uid}>\n            <UserCell userInfo={user} key={user.user.uid} followAction={props.followAction} unFollowAction={props.unFollowAction}/>\n        </div>\n    ));\n\n    return (\n        <div className={styles.UsersContainer}>\n            {\n                (props.users.length == 0 || props.users[0].user.uid == \"\") ?\n                    <div/> : usersFeed\n            }\n        </div>\n    );\n};\n\nexport default UsersContainer;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/shares/users/UserCell.tsx",["265"],"import React, {useState} from 'react';\nimport {UserInfo} from \"../../../data/entities/User\";\nimport styles from \"../../../styles/shares/users/UserCell.module.css\";\nimport {TFollowAction, TUnFollowAction} from \"../../../store/slices/usersSlice\";\n\ninterface PROPS {\n    userInfo: UserInfo\n    followAction: TFollowAction\n    unFollowAction: TUnFollowAction\n}\n\nconst UserCell: React.FC<PROPS> = (props) => {\n\n    const handleFollowButton = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.stopPropagation();\n        props.followAction(props.userInfo.user.uid)\n    };\n\n    const handleUnFollowButton = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.stopPropagation();\n        props.unFollowAction(props.userInfo.user.uid)\n    };\n\n    const handleUserCellClick = () => {\n        window.location.href = `/${props.userInfo.user.uid}`\n    };\n\n    return (\n        <div className={styles.UserCellContainer} onClick={handleUserCellClick}>\n            <img src={props.userInfo.user.profileImageUrl} alt=\"ProfileIcon\" className={styles.UserCellProfileImage}/>\n            <div className={styles.UserCellContent}>\n                <div className={styles.UserCellInnerContent}>\n                    <div className={styles.UserCellInfoContent}>\n                        <div className={styles.UserCellFullname}>{props.userInfo.user.fullname}</div>\n                        <div className={styles.UserCellUsername}>@{props.userInfo.user.username}</div>\n                    </div>\n                    { props.userInfo.isFollowed ?\n                        <button className={styles.UserCellUnFollowButton} onClick={handleUnFollowButton}\n                        >\n                            <span className={styles.UserCellButtonTextHover}>UnFollow</span>\n                            <span className={styles.UserCellButtonTextNormal}>Following</span>\n                        </button>\n                        :\n                        <button className={styles.UserCellFollowButton} onClick={handleFollowButton}>\n                            Follow\n                        </button>\n                    }\n                </div>\n                <div className={styles.UserCellBio}>\n                    {props.userInfo.user.bio}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default UserCell;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/slices/usersSlice.ts",["266","267","268"],"import { createSlice,PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\nimport {UserInfo} from \"../../data/entities/User\";\n\nconst initialUserState: UserInfo[] = [\n    {\n        user: {\n            uid: \"\",\n            fullname: \"\",\n            username: \"\",\n            profileImageUrl: \"\",\n            backgroundUrl: \"\",\n            bio: \"\",\n        },\n        isFollowed: false\n    }\n];\n\nexport const usersSlice = createSlice({\n    name: \"users\", // sliceの名称\n    initialState: {\n        // sliceの初期値\n        users: initialUserState\n    },\n    // Stateに対して更新処理を定義する場所\n    reducers: {\n        addUsers: (state,action) => {\n            //console.log(`DEBUG: Action Payload is ${action.payload[0].userInfo.user.uid}`);\n            state.users = action.payload\n        },\n        searchUsers: (state,action:{payload: string}) => {\n            const keyword = action.payload.toLowerCase();\n            state.users = state.users.filter(userInfo => (\n                userInfo.user.fullname.toLowerCase().includes(keyword) || userInfo.user.username.toLowerCase().includes(keyword)\n            ));\n        },\n        followUser: (state,action: {payload: string}) => {\n            const uid = action.payload;\n            state.users = state.users.map(userInfo => {\n                if (userInfo.user.uid == uid) {\n                    userInfo.isFollowed = true\n                }\n                return userInfo;\n            });\n        },\n        unFollowUser: (state,action: {payload: string}) => {\n            const uid = action.payload;\n            state.users = state.users.map(userInfo => {\n                if (userInfo.user.uid == uid) {\n                    userInfo.isFollowed = false\n                }\n                return userInfo;\n            });\n        },\n    }\n});\n\nexport const { addUsers,searchUsers,followUser,unFollowUser } = usersSlice.actions;\n\nexport const selectUsers = (state: RootState) => state.users.users;\n\nexport default usersSlice.reducer;\n\nexport type TFollowAction = (uid: string) => void;\n\nexport type TUnFollowAction = (uid: string) => void;\n\n\n","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/profile/UserProfile.tsx",["269"],"import React, {useEffect, useState} from 'react';\nimport { useParams } from \"react-router-dom\";\nimport {User} from \"../../data/entities/User\";\nimport styles from \"../../styles/profile/UserProfile.module.css\";\nimport Profile from \"./Profile\";\nimport LoadingPage from \"../LoadingPage\";\nimport {fetchUser} from \"../../data/repository/userRepository\";\n\nconst UserProfile: React.FC = () => {\n\n    const { uid } = useParams();\n    const [user,setUser] = useState<User|null>(null);\n    useEffect(() => {\n        fetchUser(uid).then(result => {\n            setUser(result);\n            console.log(`DEBUG: user is ${user?.fullname}`)\n        }).catch(e => {\n            console.log(`Error: ${e}`)\n        })\n    },[uid]);\n\n    return (\n        <div className={styles.UserProfileContainer}>\n            {\n                user ? <Profile user={user}/> : <LoadingPage/>\n            }\n        </div>\n    );\n};\n\nexport default UserProfile;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/shares/tweet/TweetDetail.tsx",["270","271","272"],"import React, {useEffect, useState} from 'react';\nimport { useParams,useHistory } from \"react-router-dom\";\nimport styles from \"../../../styles/shares/tweet/TweetDetail.module.css\";\nimport ProfileIcon from \"../../../images/ironman.jpg\";\nimport ArrowIcon from \"../../../images/arrow.png\";\nimport CommentIcon from \"../../../images/comment_icon.png\";\nimport SaveIcon from \"../../../images/save_icon.png\";\nimport HeartIcon from \"../../../images/heart_icon.png\";\nimport HeartLikedIcon from \"../../../images/heart_liked_icon.png\";\nimport CommentCell from \"./CommentCell\";\nimport CommentForm from \"./CommentForm\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    selectTweetDetail,\n    addTweet,\n    addComments,\n    addNewComment,\n    likeTweet,\n    unLikeTweet,\n    selectComments\n} from \"../../../store/slices/tweetDetailSlice\";\nimport {selectUser} from \"../../../store/slices/userSlice\";\nimport {fetchTweetDetail, sendLikeTweet, sendUnLikeTweet} from \"../../../data/repository/tweetRepository\";\nimport LoadingPage from \"../../LoadingPage\";\nimport {sendComment} from \"../../../data/repository/commentRepository\";\nimport CommentContainer from \"./CommentContainer\";\n\nconst TweetDetail = () => {\n    const { username,tweetId } = useParams();\n    const tweetDetail = useSelector(selectTweetDetail);\n    const comments = useSelector(selectComments);\n    const currentUser = useSelector(selectUser);\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [isFormShow,setIsFormShow] = useState<boolean>(false);\n    const [isLoading,setIsLoading] = useState<boolean>(true);\n\n    useEffect(() => {\n        setIsLoading(true);\n        fetchTweetDetail(tweetId,currentUser.uid).then(result => {\n            dispatch(addTweet(result.tweet));\n            dispatch(addComments(result.comments));\n            setIsLoading(false);\n        }).catch(e => {\n            console.log(`Error: ${e}`)\n        })\n    },[dispatch]);\n\n    const handleCommentButton = (e: React.MouseEvent<HTMLImageElement>) => {\n        e.stopPropagation();\n        setIsFormShow(true);\n    };\n\n    const closeCommentForm = () => {\n        setIsFormShow(false);\n    };\n\n    const replyAction = async (text: string) => {\n        await sendComment(currentUser,tweetId,text).then(result => {\n            dispatch(addNewComment(result));\n            setIsFormShow(false);\n        }).catch(e => {\n            console.log(`replyAction: ${e}`)\n        })\n    };\n\n    const likeTweetAction = () => {\n        sendLikeTweet(currentUser.uid,tweetId).then(result => {\n            dispatch(likeTweet())\n        }).catch(e => {\n            console.log(`Error: ${e}`)\n        })\n    };\n\n    const unLikeTweetAction = () => {\n        sendUnLikeTweet(currentUser.uid,tweetId).then(result => {\n            dispatch(unLikeTweet())\n        }).catch(e => {\n            console.log(`Error: ${e}`)\n        })\n    };\n\n    const handleBackButton = () => {\n        history.goBack();\n    };\n\n    return (\n        <div className={styles.TweetDetailContainer}>\n            {isLoading ? <LoadingPage/> :\n                <div\n                    className={isFormShow ? styles.TweetDetailInnerContainerOnFormShow : styles.TweetDetailInnerContainer}\n                    onClick={closeCommentForm}\n                    >\n                    <div className={styles.TweetDetailNav}>\n                        <img src={ArrowIcon} alt=\"BackButton\" className={styles.TweetDetailNavBackButton}\n                             onClick={handleBackButton}/>\n                        <div className={styles.TweetDetailNavTitle}>Tweet</div>\n                    </div>\n                    <div className={styles.TweetDetailContent}>\n                        <div className={styles.TweetDetailUserInfo}>\n                            <img src={tweetDetail.profileImageUrl} alt=\"Profile\"\n                                 className={styles.TweetDetailProfileImage}/>\n                            <div className={styles.TweetDetailUserContent}>\n                                <div className={styles.TweetDetailFullname}>{tweetDetail.fullname}</div>\n                                <div className={styles.TweetDetailUsername}>@{tweetDetail.username}</div>\n                            </div>\n                        </div>\n                        <div className={styles.TweetDetailText}>\n                            {tweetDetail.text}\n                        </div>\n                        <img src={ProfileIcon} alt=\"TweetImage\" className={styles.TweetDetailImage}/>\n                        <div className={styles.TweetDetailTimestamp}>{tweetDetail.timestamp}</div>\n                        <div className={styles.TweetDetailStats}>\n                            <div className={styles.TweetDetailStatsItem}>\n                                <div className={styles.TweetDetailStatsItemCount}>{tweetDetail.comments}</div>\n                                <div className={styles.TweetDetailStatsItemText}>Comments</div>\n                            </div>\n                            <div className={styles.TweetDetailStatsItem}>\n                                <div className={styles.TweetDetailStatsItemCount}>{tweetDetail.likes}</div>\n                                <div className={styles.TweetDetailStatsItemText}>Likes</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className={styles.TweetDetailActionBar}>\n                        <img src={CommentIcon} alt=\"Comment\" className={styles.TweetDetailActionButton}\n                             onClick={handleCommentButton}/>\n                        {tweetDetail.isLiked ?\n                            <img src={HeartLikedIcon} alt=\"Heart\" className={styles.TweetDetailHeartLikedButton}\n                                 onClick={unLikeTweetAction}/>\n                            :\n                            <img src={HeartIcon} alt=\"Heart\" className={styles.TweetDetailHeartButton}\n                                 onClick={likeTweetAction}/>\n                        }\n                        <img src={SaveIcon} alt=\"Save\" className={styles.TweetDetailActionButton}/>\n                    </div>\n                    <div className={styles.TweetDetailCommentContainer}>\n                        <CommentContainer comments={comments}/>\n                    </div>\n                </div>\n            }\n            {\n                isFormShow && (\n                    <div className={styles.TweetDetailCommentFormContainer}>\n                        <CommentForm cancelAction={closeCommentForm} replyAction={replyAction}/>\n                    </div>\n                )\n            }\n        </div>\n    );\n};\n\nexport default TweetDetail;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/shares/tweet/CommentCell.tsx",["273"],"import React, {useEffect} from 'react';\nimport styles from \"../../../styles/shares/tweet/CommentCell.module.css\";\nimport ProfileIcon from \"../../../images/ironman.jpg\";\nimport {Comment} from \"../../../data/entities/Comment\";\n\ninterface PROPS {\n    comment: Comment\n}\n\nconst CommentCell: React.FC<PROPS> = (props) => {\n\n    useEffect(() => {\n        console.log(`DEBUG: This is comment: ${props.comment} at CommentCell.tsx`)\n    },[props]);\n\n    return (\n        <div className={styles.CommentCellContainer}>\n            <img src={props.comment.profileImageUrl} alt=\"ProfileIcon\" className={styles.CommentCellProfileImage}/>\n            <div className={styles.CommentCellContent}>\n                <div className={styles.CommentCellUserInfo}>\n                    <div className={styles.CommentCelFullname}>{props.comment.fullname}</div>\n                    <div className={styles.CommentCellUsername}>@{props.comment.username}</div>\n                    <div className={styles.CommentCellTimestamp}>{props.comment.timestamp}</div>\n                </div>\n                <div className={styles.CommentCellText}>\n                    {props.comment.text}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default CommentCell;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/shares/tweet/CommentForm.tsx",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/store/slices/tweetDetailSlice.ts",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/entities/Comment.ts",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/data/repository/commentRepository.ts",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/shares/tweet/CommentContainer.tsx",["274","275"],"import React from 'react';\nimport {Comment} from \"../../../data/entities/Comment\";\nimport CommentCell from \"./CommentCell\";\nimport styles from \"../../../styles/shares/tweet/CommentContainer.module.css\";\n\ninterface PROPS {\n    comments: Comment[]\n}\n\nconst CommentContainer: React.FC<PROPS> = (props) => {\n\n    const feed = props.comments.map((comment) => (\n        <div className={styles.CommentContainerCell} key={comment.id}>\n            <CommentCell key={comment.id} comment={comment}/>\n        </div>\n    ));\n\n    return (\n        <div className={styles.CommentContainer}>\n            {\n                (props.comments.length == 0 || props.comments[0].id == \"\") ?\n                <div/> : feed\n            }\n        </div>\n    );\n};\n\nexport default CommentContainer;","/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/top/sidebar/tweet/TweetsSideBar.tsx",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/top/sidebar/user/UsersSideBar.tsx",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/top/sidebar/tweet/TopTweetCell.tsx",[],"/Users/harumax/WebstormProjects/react-firebase-twitter/src/views/top/sidebar/user/TopUserCell.tsx",[],{"ruleId":"276","replacedBy":"277"},{"ruleId":"278","replacedBy":"279"},{"ruleId":"280","severity":1,"message":"281","line":34,"column":29,"nodeType":"282","endLine":34,"endColumn":95},{"ruleId":"280","severity":1,"message":"281","line":38,"column":33,"nodeType":"282","endLine":38,"endColumn":57},{"ruleId":"283","severity":1,"message":"284","line":4,"column":9,"nodeType":"285","messageId":"286","endLine":4,"endColumn":13},{"ruleId":"280","severity":1,"message":"281","line":41,"column":17,"nodeType":"282","endLine":41,"endColumn":41},{"ruleId":"280","severity":1,"message":"281","line":42,"column":17,"nodeType":"282","endLine":42,"endColumn":41},{"ruleId":"287","severity":1,"message":"288","line":56,"column":7,"nodeType":"289","endLine":56,"endColumn":17,"suggestions":"290"},{"ruleId":"291","severity":1,"message":"292","line":67,"column":19,"nodeType":"293","messageId":"294","endLine":67,"endColumn":21},{"ruleId":"291","severity":1,"message":"295","line":69,"column":32,"nodeType":"293","messageId":"294","endLine":69,"endColumn":34},{"ruleId":"283","severity":1,"message":"296","line":1,"column":22,"nodeType":"285","messageId":"286","endLine":1,"endColumn":35},{"ruleId":"280","severity":1,"message":"281","line":11,"column":17,"nodeType":"282","endLine":11,"endColumn":76},{"ruleId":"276","replacedBy":"297"},{"ruleId":"278","replacedBy":"298"},{"ruleId":"283","severity":1,"message":"299","line":2,"column":35,"nodeType":"285","messageId":"286","endLine":2,"endColumn":39},{"ruleId":"283","severity":1,"message":"300","line":4,"column":9,"nodeType":"285","messageId":"286","endLine":4,"endColumn":19},{"ruleId":"283","severity":1,"message":"301","line":4,"column":21,"nodeType":"285","messageId":"286","endLine":4,"endColumn":26},{"ruleId":"291","severity":1,"message":"295","line":25,"column":44,"nodeType":"293","messageId":"294","endLine":25,"endColumn":46},{"ruleId":"291","severity":1,"message":"295","line":78,"column":24,"nodeType":"293","messageId":"294","endLine":78,"endColumn":26},{"ruleId":"287","severity":1,"message":"288","line":40,"column":7,"nodeType":"289","endLine":40,"endColumn":17,"suggestions":"302"},{"ruleId":"291","severity":1,"message":"292","line":69,"column":35,"nodeType":"293","messageId":"294","endLine":69,"endColumn":37},{"ruleId":"291","severity":1,"message":"292","line":44,"column":43,"nodeType":"293","messageId":"294","endLine":44,"endColumn":45},{"ruleId":"287","severity":1,"message":"303","line":70,"column":7,"nodeType":"289","endLine":70,"endColumn":17,"suggestions":"304"},{"ruleId":"291","severity":1,"message":"292","line":100,"column":18,"nodeType":"293","messageId":"294","endLine":100,"endColumn":20},{"ruleId":"291","severity":1,"message":"292","line":109,"column":18,"nodeType":"293","messageId":"294","endLine":109,"endColumn":20},{"ruleId":"291","severity":1,"message":"292","line":153,"column":60,"nodeType":"293","messageId":"294","endLine":153,"endColumn":62},{"ruleId":"283","severity":1,"message":"305","line":9,"column":21,"nodeType":"285","messageId":"286","endLine":9,"endColumn":29},{"ruleId":"283","severity":1,"message":"306","line":11,"column":9,"nodeType":"285","messageId":"286","endLine":11,"endColumn":19},{"ruleId":"287","severity":1,"message":"307","line":34,"column":7,"nodeType":"289","endLine":34,"endColumn":17,"suggestions":"308"},{"ruleId":"291","severity":1,"message":"292","line":41,"column":19,"nodeType":"293","messageId":"294","endLine":41,"endColumn":21},{"ruleId":"291","severity":1,"message":"295","line":43,"column":32,"nodeType":"293","messageId":"294","endLine":43,"endColumn":34},{"ruleId":"283","severity":1,"message":"309","line":26,"column":12,"nodeType":"285","messageId":"286","endLine":26,"endColumn":17},{"ruleId":"283","severity":1,"message":"310","line":26,"column":18,"nodeType":"285","messageId":"286","endLine":26,"endColumn":26},{"ruleId":"311","severity":1,"message":"312","line":68,"column":25,"nodeType":"282","endLine":68,"endColumn":101},{"ruleId":"283","severity":1,"message":"313","line":1,"column":16,"nodeType":"285","messageId":"286","endLine":1,"endColumn":25},{"ruleId":"291","severity":1,"message":"292","line":25,"column":38,"nodeType":"293","messageId":"294","endLine":25,"endColumn":40},{"ruleId":"291","severity":1,"message":"292","line":25,"column":65,"nodeType":"293","messageId":"294","endLine":25,"endColumn":67},{"ruleId":"291","severity":1,"message":"295","line":49,"column":49,"nodeType":"293","messageId":"294","endLine":49,"endColumn":51},{"ruleId":"283","severity":1,"message":"314","line":1,"column":9,"nodeType":"285","messageId":"286","endLine":1,"endColumn":25},{"ruleId":"283","severity":1,"message":"301","line":3,"column":9,"nodeType":"285","messageId":"286","endLine":3,"endColumn":14},{"ruleId":"283","severity":1,"message":"315","line":4,"column":8,"nodeType":"285","messageId":"286","endLine":4,"endColumn":16},{"ruleId":"291","severity":1,"message":"292","line":39,"column":30,"nodeType":"293","messageId":"294","endLine":39,"endColumn":32},{"ruleId":"291","severity":1,"message":"292","line":49,"column":30,"nodeType":"293","messageId":"294","endLine":49,"endColumn":32},{"ruleId":"291","severity":1,"message":"292","line":39,"column":27,"nodeType":"293","messageId":"294","endLine":39,"endColumn":29},{"ruleId":"291","severity":1,"message":"295","line":40,"column":19,"nodeType":"293","messageId":"294","endLine":40,"endColumn":21},{"ruleId":"291","severity":1,"message":"292","line":61,"column":31,"nodeType":"293","messageId":"294","endLine":61,"endColumn":33},{"ruleId":"291","severity":1,"message":"295","line":63,"column":48,"nodeType":"293","messageId":"294","endLine":63,"endColumn":50},{"ruleId":"291","severity":1,"message":"292","line":65,"column":22,"nodeType":"293","messageId":"294","endLine":65,"endColumn":24},{"ruleId":"291","severity":1,"message":"292","line":67,"column":29,"nodeType":"293","messageId":"294","endLine":67,"endColumn":31},{"ruleId":"291","severity":1,"message":"292","line":69,"column":29,"nodeType":"293","messageId":"294","endLine":69,"endColumn":31},{"ruleId":"291","severity":1,"message":"292","line":75,"column":22,"nodeType":"293","messageId":"294","endLine":75,"endColumn":24},{"ruleId":"291","severity":1,"message":"292","line":77,"column":29,"nodeType":"293","messageId":"294","endLine":77,"endColumn":31},{"ruleId":"291","severity":1,"message":"292","line":79,"column":29,"nodeType":"293","messageId":"294","endLine":79,"endColumn":31},{"ruleId":"291","severity":1,"message":"292","line":88,"column":22,"nodeType":"293","messageId":"294","endLine":88,"endColumn":24},{"ruleId":"291","severity":1,"message":"292","line":98,"column":22,"nodeType":"293","messageId":"294","endLine":98,"endColumn":24},{"ruleId":"291","severity":1,"message":"292","line":59,"column":44,"nodeType":"293","messageId":"294","endLine":59,"endColumn":46},{"ruleId":"291","severity":1,"message":"292","line":75,"column":46,"nodeType":"293","messageId":"294","endLine":75,"endColumn":48},{"ruleId":"283","severity":1,"message":"316","line":21,"column":11,"nodeType":"285","messageId":"286","endLine":21,"endColumn":18},{"ruleId":"291","severity":1,"message":"295","line":97,"column":55,"nodeType":"293","messageId":"294","endLine":97,"endColumn":57},{"ruleId":"291","severity":1,"message":"292","line":25,"column":37,"nodeType":"293","messageId":"294","endLine":25,"endColumn":39},{"ruleId":"291","severity":1,"message":"292","line":25,"column":69,"nodeType":"293","messageId":"294","endLine":25,"endColumn":71},{"ruleId":"283","severity":1,"message":"317","line":1,"column":16,"nodeType":"285","messageId":"286","endLine":1,"endColumn":24},{"ruleId":"283","severity":1,"message":"296","line":1,"column":22,"nodeType":"285","messageId":"286","endLine":1,"endColumn":35},{"ruleId":"291","severity":1,"message":"292","line":40,"column":39,"nodeType":"293","messageId":"294","endLine":40,"endColumn":41},{"ruleId":"291","severity":1,"message":"292","line":49,"column":39,"nodeType":"293","messageId":"294","endLine":49,"endColumn":41},{"ruleId":"287","severity":1,"message":"318","line":20,"column":7,"nodeType":"289","endLine":20,"endColumn":12,"suggestions":"319"},{"ruleId":"283","severity":1,"message":"320","line":10,"column":8,"nodeType":"285","messageId":"286","endLine":10,"endColumn":19},{"ruleId":"283","severity":1,"message":"321","line":29,"column":13,"nodeType":"285","messageId":"286","endLine":29,"endColumn":21},{"ruleId":"287","severity":1,"message":"322","line":47,"column":7,"nodeType":"289","endLine":47,"endColumn":17,"suggestions":"323"},{"ruleId":"283","severity":1,"message":"324","line":3,"column":8,"nodeType":"285","messageId":"286","endLine":3,"endColumn":19},{"ruleId":"291","severity":1,"message":"292","line":21,"column":40,"nodeType":"293","messageId":"294","endLine":21,"endColumn":42},{"ruleId":"291","severity":1,"message":"292","line":21,"column":69,"nodeType":"293","messageId":"294","endLine":21,"endColumn":71},"no-native-reassign",["325"],"no-negated-in-lhs",["326"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@typescript-eslint/no-unused-vars","'auth' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentUser.uid'. Either include it or remove the dependency array.","ArrayExpression",["327"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'PayloadAction' is defined but never used.",["325"],["326"],"'User' is defined but never used.","'buildTweet' is defined but never used.","'Tweet' is defined but never used.",["328"],"React Hook useEffect has missing dependencies: 'currentUser.uid', 'props.user.backgroundUrl', 'props.user.bio', 'props.user.fullname', 'props.user.profileImageUrl', 'props.user.uid', and 'props.user.username'. Either include them or remove the dependency array.",["329"],"'addUsers' is defined but never used.","'fetchUsers' is defined but never used.","React Hook useEffect has missing dependencies: 'location.pathname' and 'location.search'. Either include them or remove the dependency array.",["330"],"'error' is assigned a value but never used.","'setError' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'useEffect' is defined but never used.","'createAsyncThunk' is defined but never used.","'firebase' is defined but never used.","'profile' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'user?.fullname'. Either include it or remove the dependency array.",["331"],"'CommentCell' is defined but never used.","'username' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentUser.uid' and 'tweetId'. Either include them or remove the dependency array.",["332"],"'ProfileIcon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"333","fix":"334"},{"desc":"333","fix":"335"},{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},"Update the dependencies array to be: [currentUser.uid, dispatch]",{"range":"344","text":"345"},{"range":"346","text":"345"},"Update the dependencies array to be: [currentUser.uid, dispatch, props.user.backgroundUrl, props.user.bio, props.user.fullname, props.user.profileImageUrl, props.user.uid, props.user.username]",{"range":"347","text":"348"},"Update the dependencies array to be: [dispatch, location.pathname, location.search]",{"range":"349","text":"350"},"Update the dependencies array to be: [uid, user?.fullname]",{"range":"351","text":"352"},"Update the dependencies array to be: [currentUser.uid, dispatch, tweetId]",{"range":"353","text":"354"},[2659,2669],"[currentUser.uid, dispatch]",[1594,1604],[2842,2852],"[currentUser.uid, dispatch, props.user.backgroundUrl, props.user.bio, props.user.fullname, props.user.profileImageUrl, props.user.uid, props.user.username]",[1649,1659],"[dispatch, location.pathname, location.search]",[706,711],"[uid, user?.fullname]",[1933,1943],"[currentUser.uid, dispatch, tweetId]"]